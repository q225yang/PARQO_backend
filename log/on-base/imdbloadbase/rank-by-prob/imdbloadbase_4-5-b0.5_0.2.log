INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 6962.24, plan is: /*+
SeqScan(k)
IndexScan(mk)
IndexScan(t)
IndexScan(mi_idx)
SeqScan(it)
NestLoop ( k mk )
NestLoop ( k mk t )
NestLoop ( k mk t mi_idx )
NestLoop ( k mk t mi_idx it )
Leading ( ( ( ( ( k mk ) t ) mi_idx ) it ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.6293271341136877), ((5, 'mi_idx_it_both.txt'), 0.12874837598614577), ((1, 'k.txt'), 0.11222365665265707), ((7, 'mk_mi_idx_r.txt'), 0.00880413283365451), ((2, 'mi_idx.txt'), -0.006249105829460184), ((4, 't.txt'), -0.00013168014332014377), ((9, 't_mk_l.txt'), -1.8482256369234652e-05), ((8, 't_mi_idx_both.txt'), 6.05027043759499e-06)]
INFO:root:Max absolute value 1: (0, 4) - Value: 0.9211061304218815
Max absolute value 2: (4, 5) - Value: -0.2483068758368543
Max absolute value 3: (4, 6) - Value: -0.24646687205226664
Max absolute value 4: (4, 7) - Value: -0.24633873840988196
Max absolute value 5: (0, 3) - Value: 0.18379485266569337

INFO:root:Sobols samples size: 2304
INFO:root:[((6, 'mk_k_r.txt'), 0.667089499181664), ((5, 'mi_idx_it_both.txt'), 0.19961718374539703), ((1, 'k.txt'), 0.15017210428729155), ((2, 'mi_idx.txt'), -0.01677573352292635), ((7, 'mk_mi_idx_r.txt'), 0.015533147670722742), ((4, 't.txt'), -4.114660292649242e-05), ((9, 't_mk_l.txt'), -3.699130129360688e-05), ((8, 't_mi_idx_both.txt'), -2.6690849774242534e-06)]
INFO:root:Max absolute value 1: (3, 5) - Value: -0.18840546646402073
Max absolute value 2: (3, 6) - Value: -0.18033203771407239
Max absolute value 3: (3, 7) - Value: -0.18032440946312467
Max absolute value 4: (4, 6) - Value: -0.14763919783937368
Max absolute value 5: (4, 7) - Value: -0.14738411989719816

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.5751754655469065), ((1, 'k.txt'), 0.09548313785583874), ((5, 'mi_idx_it_both.txt'), 0.06191395313754489), ((2, 'mi_idx.txt'), -0.011377045453335611), ((4, 't.txt'), -0.00013662253199401805), ((9, 't_mk_l.txt'), -9.718283103762959e-05), ((7, 'mk_mi_idx_r.txt'), -1.0349267344776161e-05), ((8, 't_mi_idx_both.txt'), 7.927641464598118e-06)]
INFO:root:Max absolute value 1: (4, 5) - Value: 0.6877349375299417
Max absolute value 2: (4, 7) - Value: 0.6700607772694681
Max absolute value 3: (4, 6) - Value: 0.6693963815166203
Max absolute value 4: (0, 4) - Value: 0.11936486906523969
Max absolute value 5: (3, 4) - Value: 0.11031086538779133

INFO:root:Sobols samples size: 576
INFO:root:[((1, 'k.txt'), 0.218243162027911), ((6, 'mk_k_r.txt'), 0.2096287041488809), ((5, 'mi_idx_it_both.txt'), 0.034382215076688934), ((2, 'mi_idx.txt'), -0.019104100035148917), ((7, 'mk_mi_idx_r.txt'), -0.00214009187593342), ((4, 't.txt'), -0.00036689008864929773), ((9, 't_mk_l.txt'), -0.00022475903556653414), ((8, 't_mi_idx_both.txt'), 8.677331412046469e-06)]
INFO:root:Max absolute value 1: (4, 5) - Value: 1.4701562744916166
Max absolute value 2: (4, 7) - Value: 1.469594694635971
Max absolute value 3: (4, 6) - Value: 1.4682735493658277
Max absolute value 4: (3, 4) - Value: 0.3495365551323124
Max absolute value 5: (0, 4) - Value: 0.21906953959622805

INFO:root:Sobols samples size: 288
INFO:root:[((1, 'k.txt'), 0.211406577417842), ((5, 'mi_idx_it_both.txt'), 0.1094220108437955), ((6, 'mk_k_r.txt'), 0.05546179917815305), ((2, 'mi_idx.txt'), -0.046886227430994264), ((7, 'mk_mi_idx_r.txt'), -0.007034156804474862), ((4, 't.txt'), -5.425180767507379e-05), ((8, 't_mi_idx_both.txt'), 4.986632491406709e-05), ((9, 't_mk_l.txt'), -1.6166397656619715e-06)]
INFO:root:Max absolute value 1: (4, 5) - Value: 2.3534986256270654
Max absolute value 2: (4, 7) - Value: 2.350325180999242
Max absolute value 3: (4, 6) - Value: 2.350241893657417
Max absolute value 4: (3, 4) - Value: 0.47168205307272554
Max absolute value 5: (0, 4) - Value: 0.30072646792953567

INFO:root:Sobols samples size: 144
INFO:root:[((1, 'k.txt'), -0.6739680268706596), ((5, 'mi_idx_it_both.txt'), 0.21872540269820573), ((6, 'mk_k_r.txt'), 0.10591423787065798), ((2, 'mi_idx.txt'), -0.00729444992621098), ((7, 'mk_mi_idx_r.txt'), 0.0025658202342654745), ((8, 't_mi_idx_both.txt'), 6.396941006926287e-05), ((4, 't.txt'), -3.971438783859393e-06), ((9, 't_mk_l.txt'), -3.971438783859393e-06)]
INFO:root:Max absolute value 1: (4, 7) - Value: 4.304217952195609
Max absolute value 2: (4, 6) - Value: 4.304058505939933
Max absolute value 3: (4, 5) - Value: 4.30184890498337
Max absolute value 4: (3, 4) - Value: 0.7513456862695439
Max absolute value 5: (0, 2) - Value: 0.7365320513287769

INFO:root:Sobol's solving time: 215.91877794265747(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 1
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 6 plan: 	[(0, 3943.87), (1, 3941.5), (2, 4173.05), (3, 3941.5), (4, 22241.13), (5, 46500.03)]
INFO:root:Sensitive predicates: [1, 5, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [1, 3], overhead 14.315685510635376s
INFO:root:exp_penalty_w_tol: 	[(0, 22970), (1, 6600), (2, 202944), (3, 6600), (4, 19342), (5, 32352)]
INFO:root:### Best plan by std penalty: [5], overhead 14.315685510635376s
INFO:root:std_penalty: 	[(0, 77109.36297760914), (1, 23126.31030884094), (2, 393936.1824367366), (3, 23126.61487883015), (4, 27467.63796446871), (5, 10674.4763675086)]
INFO:root:### Best plan by prob of penalized: [1, 3], overhead 14.315685510635376s
INFO:root:std_penalty: 	[(0, 0.48), (1, 0.18), (2, 0.8), (3, 0.18), (4, 0.86), (5, 0.96)]
