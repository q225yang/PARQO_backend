INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 7169.87, plan is: /*+
SeqScan(cct1)
IndexScan(cc)
SeqScan(k)
IndexScan(mk)
SeqScan(cct2)
IndexScan(t)
IndexScan(ci)
IndexScan(chn)
IndexOnlyScan(n)
IndexScan(kt)
NestLoop ( cct1 cc )
NestLoop ( k mk )
HashJoin ( cct1 cc k mk )
HashJoin ( cct1 cc k mk cct2 )
NestLoop ( cct1 cc k mk cct2 t )
NestLoop ( cct1 cc k mk cct2 t ci )
NestLoop ( cct1 cc k mk cct2 t ci chn )
NestLoop ( cct1 cc k mk cct2 t ci chn n )
NestLoop ( cct1 cc k mk cct2 t ci chn n kt )
Leading ( ( ( ( ( ( ( ( ( cct1 cc ) ( k mk ) ) cct2 ) t ) ci ) chn ) n ) kt ) ) */
INFO:root:Sobols samples size: 9216
INFO:root:[((1, 'cct.txt'), 0.7603279939684369), ((19, 'mk_k_r.txt'), -0.07446601919836644), ((10, 'cct_cc_1_l.txt'), 0.03010713795411697), ((13, 'mk_cc__cct.txt'), 0.029053448511754003), ((5, 'k.txt'), -0.025024380879241664), ((2, 'cct.txt'), -0.011986766498439752), ((11, 'cct_cc_2_l.txt'), -0.004175176350491698), ((14, 't_cc_l.txt'), 7.962092007689408e-05), ((12, 'ci_cc__cct.txt'), -5.145036226034051e-05), ((20, 't_kt_both.txt'), 4.722205030227296e-05), ((21, 't_mk_l.txt'), 1.8484673860231207e-05), ((16, 'mk_ci__chn.txt'), 1.4561664140640483e-05), ((9, 't.txt'), -1.2535907093698246e-05), ((15, 'ci_chn_r.txt'), -3.57899059855052e-06), ((3, 'chn.txt'), -6.895563471096652e-07), ((17, 'n_ci__chn.txt'), -2.740896610510396e-07), ((18, 't_ci_l.txt'), -4.9309591250576216e-08)]
INFO:root:Max absolute value 1: (0, 8) - Value: -0.45014131524726825
Max absolute value 2: (0, 3) - Value: -0.4246198346366533
Max absolute value 3: (0, 15) - Value: -0.4231522082618402
Max absolute value 4: (0, 4) - Value: -0.4230699246834497
Max absolute value 5: (0, 16) - Value: -0.4229902692635521

INFO:root:Sobols samples size: 4608
INFO:root:[((1, 'cct.txt'), 0.5924476901602078), ((13, 'mk_cc__cct.txt'), 0.06409982221718487), ((11, 'cct_cc_2_l.txt'), -0.059389065452970326), ((5, 'k.txt'), 0.039621178784246786), ((10, 'cct_cc_1_l.txt'), 0.0373852452113421), ((19, 'mk_k_r.txt'), -0.02556356512100749), ((2, 'cct.txt'), -0.015804989785562735), ((20, 't_kt_both.txt'), -5.765855802284104e-05), ((14, 't_cc_l.txt'), 5.221315557929524e-05), ((16, 'mk_ci__chn.txt'), 3.330191703068249e-05), ((9, 't.txt'), -2.8127789953046092e-05), ((12, 'ci_cc__cct.txt'), -2.314935844764695e-05), ((21, 't_mk_l.txt'), -3.872990630252456e-06), ((3, 'chn.txt'), -1.5535181043207098e-06), ((15, 'ci_chn_r.txt'), -1.341151418126865e-06), ((17, 'n_ci__chn.txt'), -6.175494300087784e-07), ((18, 't_ci_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 3) - Value: -0.382708041355743
Max absolute value 2: (0, 4) - Value: -0.3089976004810018
Max absolute value 3: (0, 15) - Value: -0.30899170394283676
Max absolute value 4: (0, 7) - Value: -0.30898507777715856
Max absolute value 5: (0, 16) - Value: -0.30894698471784293

INFO:root:Sobols samples size: 2304
INFO:root:[((1, 'cct.txt'), 0.5248867190214701), ((13, 'mk_cc__cct.txt'), 0.09083548821541562), ((5, 'k.txt'), 0.08574878426058831), ((11, 'cct_cc_2_l.txt'), -0.06557914432393383), ((19, 'mk_k_r.txt'), -0.030971306630689387), ((10, 'cct_cc_1_l.txt'), -0.00429892533624743), ((2, 'cct.txt'), -0.0015765232468837776), ((9, 't.txt'), -4.549628186170036e-05), ((14, 't_cc_l.txt'), 3.443323073673564e-05), ((20, 't_kt_both.txt'), 2.9491315731936194e-05), ((12, 'ci_cc__cct.txt'), -2.5891309947508273e-06), ((17, 'n_ci__chn.txt'), -3.332632348986583e-07), ((3, 'chn.txt'), -1.0167478151255397e-07), ((15, 'ci_chn_r.txt'), 0.0), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 3) - Value: -0.4286493638638824
Max absolute value 2: (6, 8) - Value: 0.3398333521607819
Max absolute value 3: (0, 7) - Value: -0.32724314108581215
Max absolute value 4: (0, 15) - Value: -0.32724071157416124
Max absolute value 5: (0, 9) - Value: -0.32723657010595353

INFO:root:Sobols samples size: 1152
INFO:root:[((1, 'cct.txt'), 0.8271140151246597), ((5, 'k.txt'), 0.13306507333892872), ((19, 'mk_k_r.txt'), 0.0439564204392092), ((11, 'cct_cc_2_l.txt'), -0.03582783368851205), ((10, 'cct_cc_1_l.txt'), -0.011596717787632134), ((13, 'mk_cc__cct.txt'), -0.0037080234157109517), ((2, 'cct.txt'), 0.0008887556015681621), ((20, 't_kt_both.txt'), 6.791096517441178e-05), ((14, 't_cc_l.txt'), 4.135207211350757e-05), ((9, 't.txt'), 2.318824016353149e-05), ((12, 'ci_cc__cct.txt'), 4.174908574571259e-06), ((17, 'n_ci__chn.txt'), -7.304232569729842e-07), ((3, 'chn.txt'), 8.957179575452361e-09), ((15, 'ci_chn_r.txt'), 0.0), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 3) - Value: -0.6788885773514137
Max absolute value 2: (0, 15) - Value: -0.547089309914306
Max absolute value 3: (0, 7) - Value: -0.5470679283471839
Max absolute value 4: (0, 9) - Value: -0.5470671385853606
Max absolute value 5: (0, 4) - Value: -0.5470654247704194

INFO:root:Sobols samples size: 576
INFO:root:[((1, 'cct.txt'), 0.9191915461029218), ((5, 'k.txt'), 0.1498249912010164), ((10, 'cct_cc_1_l.txt'), -0.03946523645167666), ((11, 'cct_cc_2_l.txt'), -0.03192800823831735), ((19, 'mk_k_r.txt'), 0.02747718909952238), ((2, 'cct.txt'), -0.013954344167701496), ((13, 'mk_cc__cct.txt'), 0.0019779310748926646), ((20, 't_kt_both.txt'), 5.099560063850523e-05), ((9, 't.txt'), -9.123258119738507e-06), ((14, 't_cc_l.txt'), 8.315096676769091e-06), ((12, 'ci_cc__cct.txt'), -3.316520217130907e-06), ((3, 'chn.txt'), 1.5811687307786143e-08), ((17, 'n_ci__chn.txt'), -9.944809394281165e-11), ((15, 'ci_chn_r.txt'), 0.0), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 3) - Value: -0.8383286216666646
Max absolute value 2: (0, 8) - Value: -0.6865279076178137
Max absolute value 3: (0, 15) - Value: -0.6838635473642868
Max absolute value 4: (0, 9) - Value: -0.6838142242062564
Max absolute value 5: (0, 2) - Value: -0.6838100562731011

INFO:root:Sobols samples size: 288
INFO:root:[((1, 'cct.txt'), 0.9224700120946769), ((5, 'k.txt'), 0.16002982825629472), ((10, 'cct_cc_1_l.txt'), -0.07099619082300103), ((19, 'mk_k_r.txt'), 0.05489922957841323), ((11, 'cct_cc_2_l.txt'), -0.026431732467151307), ((13, 'mk_cc__cct.txt'), 0.0003788374993486699), ((2, 'cct.txt'), 0.00027638031065216074), ((20, 't_kt_both.txt'), 5.402128232442548e-05), ((9, 't.txt'), -1.691028801820904e-05), ((14, 't_cc_l.txt'), 8.41305958567247e-06), ((12, 'ci_cc__cct.txt'), -2.804353195241423e-06), ((3, 'chn.txt'), 0.0), ((15, 'ci_chn_r.txt'), 0.0), ((16, 'mk_ci__chn.txt'), 0.0), ((17, 'n_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 3) - Value: -0.8557989401578373
Max absolute value 2: (0, 14) - Value: -0.7508828131428397
Max absolute value 3: (0, 8) - Value: -0.6853032176857273
Max absolute value 4: (0, 1) - Value: -0.6851218971480193
Max absolute value 5: (0, 15) - Value: -0.6848529451754551

INFO:root:Sobols samples size: 144
INFO:root:[((1, 'cct.txt'), 1.1107479421098179), ((19, 'mk_k_r.txt'), 0.337037477239932), ((11, 'cct_cc_2_l.txt'), 0.06911135783178583), ((10, 'cct_cc_1_l.txt'), -0.06430559621978067), ((2, 'cct.txt'), 0.0025641963668856546), ((13, 'mk_cc__cct.txt'), -0.0019001440456665132), ((14, 't_cc_l.txt'), 0.0002068863410800945), ((12, 'ci_cc__cct.txt'), -6.896211369330162e-05), ((9, 't.txt'), 5.168206597529334e-05), ((3, 'chn.txt'), 0.0), ((5, 'k.txt'), 0.0), ((15, 'ci_chn_r.txt'), 0.0), ((16, 'mk_ci__chn.txt'), 0.0), ((17, 'n_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((20, 't_kt_both.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 14) - Value: -0.8320336060647255
Max absolute value 2: (0, 6) - Value: -0.582572356202841
Max absolute value 3: (0, 1) - Value: -0.5021036927303084
Max absolute value 4: (0, 9) - Value: -0.49646514441399964
Max absolute value 5: (0, 4) - Value: -0.4963342720384756

INFO:root:Sobol's solving time: 833.9012570381165(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 15 plan: 	[(0, 3944.97), (1, 7725.68), (2, 7725.68), (3, 7286.31), (4, 7286.31), (5, 7286.31), (6, 7709.15), (7, 6803.88), (8, 6803.88), (9, 6803.88), (10, 6803.88), (11, 6694.71), (12, 6694.71), (13, 6694.71), (14, 6800.41)]
INFO:root:Sensitive predicates: [1, 19]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [3, 4, 5], overhead 68.38711953163147s
INFO:root:exp_penalty_w_tol: 	[(0, 10298), (1, 7756), (2, 7754), (3, 1110), (4, 1110), (5, 1110), (6, 1830), (7, 7080), (8, 7079), (9, 7081), (10, 7080), (11, 2085), (12, 2085), (13, 2085), (14, 2449)]
INFO:root:### Best plan by std penalty: [5], overhead 68.38711953163147s
INFO:root:std_penalty: 	[(0, 13156.192233330275), (1, 6109.897072888246), (2, 6108.313132868711), (3, 1467.4316519773042), (4, 1467.599934979557), (5, 1467.3943141873763), (6, 1665.820005191305), (7, 11142.922584434345), (8, 11142.004238297613), (9, 11145.814347056632), (10, 11143.65846631019), (11, 3325.9462865037917), (12, 3325.6190956503483), (13, 3325.2201441601787), (14, 4019.0913480679983)]
INFO:root:### Best plan by prob of penalized: [3, 4, 5], overhead 68.38711953163147s
INFO:root:std_penalty: 	[(0, 0.66), (1, 1.0), (2, 1.0), (3, 0.38), (4, 0.38), (5, 0.38), (6, 0.6), (7, 0.86), (8, 0.86), (9, 0.86), (10, 0.86), (11, 0.4), (12, 0.4), (13, 0.4), (14, 0.4)]
