INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 6999.24, plan is: /*+
SeqScan(it)
SeqScan(k)
IndexScan(mk)
IndexScan(t)
IndexScan(mi_idx)
NestLoop ( k mk )
NestLoop ( k mk t )
NestLoop ( k mk t mi_idx )
NestLoop ( it k mk t mi_idx )
Leading ( ( it ( ( ( k mk ) t ) mi_idx ) ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.5630678225343785), ((9, 't_mk_l.txt'), 0.12246511562962836), ((5, 'mi_idx_it_both.txt'), 0.08955773238129114), ((1, 'k.txt'), 0.07971689827612519), ((7, 'mk_mi_idx_r.txt'), 0.0074683659718162735), ((2, 'mi_idx.txt'), -0.004814972401365012), ((4, 't.txt'), 0.0005365550990826774), ((8, 't_mi_idx_both.txt'), 8.949743395741503e-05)]
INFO:root:Max absolute value 1: (0, 4) - Value: 0.5707144920318549
Max absolute value 2: (4, 7) - Value: -0.3710186664854189
Max absolute value 3: (4, 5) - Value: -0.32143446681097865
Max absolute value 4: (4, 6) - Value: -0.3197894516477516
Max absolute value 5: (0, 2) - Value: 0.10970822353811291

INFO:root:Sobols samples size: 2304
INFO:root:[((6, 'mk_k_r.txt'), 0.6184156814212893), ((5, 'mi_idx_it_both.txt'), 0.14054415810989265), ((1, 'k.txt'), 0.10175071713918457), ((2, 'mi_idx.txt'), -0.011742879272169108), ((7, 'mk_mi_idx_r.txt'), 0.011656275917641361), ((9, 't_mk_l.txt'), 0.011484218264650816), ((4, 't.txt'), -0.00037929331419491965), ((8, 't_mi_idx_both.txt'), -9.755916601975062e-05)]
INFO:root:Max absolute value 1: (4, 6) - Value: -0.3347843989012554
Max absolute value 2: (4, 5) - Value: -0.33352996413201186
Max absolute value 3: (4, 7) - Value: -0.2433390736971385
Max absolute value 4: (2, 7) - Value: 0.1834427834558948
Max absolute value 5: (3, 5) - Value: -0.1385195123313278

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.6741907266983957), ((1, 'k.txt'), 0.11570437096643571), ((9, 't_mk_l.txt'), -0.0900730168307904), ((5, 'mi_idx_it_both.txt'), 0.06365036330116458), ((2, 'mi_idx.txt'), -0.011894893393746749), ((4, 't.txt'), -0.0022465189334894974), ((8, 't_mi_idx_both.txt'), -0.0003617966921018236), ((7, 'mk_mi_idx_r.txt'), 7.663013862977265e-05)]
INFO:root:Max absolute value 1: (4, 7) - Value: 0.8064661997228311
Max absolute value 2: (2, 7) - Value: 0.7655891725216998
Max absolute value 3: (4, 5) - Value: 0.3333209448686999
Max absolute value 4: (4, 6) - Value: 0.3134830632121773
Max absolute value 5: (3, 4) - Value: 0.13598676823390543

INFO:root:Sobols samples size: 576
INFO:root:[((6, 'mk_k_r.txt'), 0.2898702906476497), ((1, 'k.txt'), 0.24560391172957846), ((9, 't_mk_l.txt'), -0.2383434840821983), ((2, 'mi_idx.txt'), -0.020677163900560746), ((5, 'mi_idx_it_both.txt'), 0.020141552445547103), ((7, 'mk_mi_idx_r.txt'), -0.0030820235004069465), ((4, 't.txt'), 0.003004616797741382), ((8, 't_mi_idx_both.txt'), -0.0009617910179917854)]
INFO:root:Max absolute value 1: (4, 7) - Value: 2.2126750460595437
Max absolute value 2: (2, 7) - Value: 1.8252198874895555
Max absolute value 3: (4, 6) - Value: 1.098815805213719
Max absolute value 4: (4, 5) - Value: 1.0979235357630137
Max absolute value 5: (3, 4) - Value: 0.4473257175431188

INFO:root:Sobols samples size: 288
INFO:root:[((6, 'mk_k_r.txt'), 0.2523003928018094), ((1, 'k.txt'), 0.23289917654392323), ((5, 'mi_idx_it_both.txt'), 0.11473378434118313), ((2, 'mi_idx.txt'), -0.04645632204427335), ((7, 'mk_mi_idx_r.txt'), -0.008087516829610793), ((4, 't.txt'), -0.0006154480258743365), ((9, 't_mk_l.txt'), 0.00035616068319251727), ((8, 't_mi_idx_both.txt'), 9.344368823305767e-07)]
INFO:root:Max absolute value 1: (4, 5) - Value: 1.6433925237674654
Max absolute value 2: (4, 6) - Value: 1.640129062003416
Max absolute value 3: (4, 7) - Value: 1.639716090650301
Max absolute value 4: (3, 4) - Value: 0.4758861737063007
Max absolute value 5: (0, 3) - Value: -0.34187422863399664

INFO:root:Sobols samples size: 144
INFO:root:[((1, 'k.txt'), -0.832509661621509), ((5, 'mi_idx_it_both.txt'), 0.26039230192553425), ((6, 'mk_k_r.txt'), -0.030720105348219666), ((2, 'mi_idx.txt'), -0.007933567415387133), ((7, 'mk_mi_idx_r.txt'), 0.002820428624659593), ((4, 't.txt'), -0.0020305628413274986), ((9, 't_mk_l.txt'), 0.0005359218795386737), ((8, 't_mi_idx_both.txt'), -2.0987047929581935e-05)]
INFO:root:Max absolute value 1: (4, 6) - Value: 4.10416806436044
Max absolute value 2: (4, 7) - Value: 4.1032456330074965
Max absolute value 3: (4, 5) - Value: 4.100463314688079
Max absolute value 4: (3, 4) - Value: 1.1338951300599267
Max absolute value 5: (0, 2) - Value: 0.8446746692011529

INFO:root:Sobol's solving time: 216.94961881637573(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 4 plan: 	[(0, 3941.65), (1, 3941.65), (2, 21270.11), (3, 22241.14)]
INFO:root:Sensitive predicates: [5, 6, 9]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [0], overhead 9.679856777191162s
INFO:root:exp_penalty_w_tol: 	[(0, 1541), (1, 1704), (2, 127004), (3, 17040)]
INFO:root:### Best plan by std penalty: [0], overhead 9.679856777191162s
INFO:root:std_penalty: 	[(0, 5904.272753651035), (1, 6145.502823522241), (2, 110955.48239140313), (3, 11099.310878417678)]
INFO:root:### Best plan by prob of penalized: [0], overhead 9.679856777191162s
INFO:root:std_penalty: 	[(0, 0.08), (1, 0.1), (2, 0.98), (3, 0.88)]
