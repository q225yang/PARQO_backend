INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 7065.53, plan is: /*+
SeqScan(it)
SeqScan(k)
IndexScan(mk)
IndexScan(mi_idx)
IndexScan(t)
NestLoop ( k mk )
NestLoop ( k mk mi_idx )
NestLoop ( it k mk mi_idx )
NestLoop ( it k mk mi_idx t )
Leading ( ( ( it ( ( k mk ) mi_idx ) ) t ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.8509310011305117), ((1, 'k.txt'), 0.08360790818245782), ((5, 'mi_idx_it_both.txt'), 0.02311579217426194), ((8, 't_mi_idx_both.txt'), 0.0004475428315351375), ((4, 't.txt'), -0.00020228039865942253), ((7, 'mk_mi_idx_r.txt'), 0.00014608415984210233), ((2, 'mi_idx.txt'), -8.550971456259663e-05), ((9, 't_mk_l.txt'), -7.617168167927191e-05)]
INFO:root:Max absolute value 1: (0, 4) - Value: 0.61477217013426
Max absolute value 2: (4, 6) - Value: -0.1905765579809845
Max absolute value 3: (4, 7) - Value: -0.19006222662068217
Max absolute value 4: (4, 5) - Value: -0.18983514883385946
Max absolute value 5: (0, 1) - Value: 0.16511422412268936

INFO:root:Sobols samples size: 2304
INFO:root:[((6, 'mk_k_r.txt'), 0.8191808526008197), ((1, 'k.txt'), 0.12729422953945477), ((5, 'mi_idx_it_both.txt'), 0.028924812678756916), ((2, 'mi_idx.txt'), -0.0022352257091885538), ((8, 't_mi_idx_both.txt'), 0.0007838546160667179), ((7, 'mk_mi_idx_r.txt'), -0.00022260448915499992), ((9, 't_mk_l.txt'), -0.00017214134149504495), ((4, 't.txt'), -0.00012518612099559086)]
INFO:root:Max absolute value 1: (0, 4) - Value: 0.11257131556054545
Max absolute value 2: (4, 5) - Value: 0.06513820375773914
Max absolute value 3: (4, 7) - Value: 0.06448342384202235
Max absolute value 4: (4, 6) - Value: 0.06423374331138938
Max absolute value 5: (3, 6) - Value: -0.040700838403652066

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.723126743472799), ((1, 'k.txt'), 0.0563165883986645), ((5, 'mi_idx_it_both.txt'), 0.010836910061344527), ((2, 'mi_idx.txt'), -0.0019636128500172038), ((8, 't_mi_idx_both.txt'), 0.0014419794601012634), ((7, 'mk_mi_idx_r.txt'), -0.0005322969091454706), ((9, 't_mk_l.txt'), -0.000299844318302832), ((4, 't.txt'), -9.870563365569611e-05)]
INFO:root:Max absolute value 1: (4, 5) - Value: 0.7523215396331631
Max absolute value 2: (4, 7) - Value: 0.7510057353777526
Max absolute value 3: (4, 6) - Value: 0.7509382740299133
Max absolute value 4: (0, 4) - Value: 0.12769384947642337
Max absolute value 5: (0, 1) - Value: 0.0668509733434364

INFO:root:Sobols samples size: 576
INFO:root:[((6, 'mk_k_r.txt'), 0.5189678206316735), ((1, 'k.txt'), 0.1387490946909285), ((5, 'mi_idx_it_both.txt'), 0.007918534656248753), ((8, 't_mi_idx_both.txt'), 0.0027828148793400584), ((2, 'mi_idx.txt'), -0.0027265849149032523), ((7, 'mk_mi_idx_r.txt'), -0.0003801838629419998), ((9, 't_mk_l.txt'), -0.00021508855823161797), ((4, 't.txt'), 0.00020390033309051377)]
INFO:root:Max absolute value 1: (4, 7) - Value: 1.0803800638789236
Max absolute value 2: (4, 6) - Value: 1.0790925527484976
Max absolute value 3: (4, 5) - Value: 1.0763686614034054
Max absolute value 4: (0, 4) - Value: 0.1736809844613154
Max absolute value 5: (0, 1) - Value: 0.06456320422241855

INFO:root:Sobols samples size: 288
INFO:root:[((6, 'mk_k_r.txt'), 0.6143598784782845), ((1, 'k.txt'), 0.11203484483979284), ((5, 'mi_idx_it_both.txt'), 0.031180491103498405), ((2, 'mi_idx.txt'), -0.007266616941270318), ((8, 't_mi_idx_both.txt'), 0.005977567340191358), ((4, 't.txt'), -0.0012800709757370497), ((7, 'mk_mi_idx_r.txt'), -0.0005334343850230019), ((9, 't_mk_l.txt'), -3.077208798171713e-07)]
INFO:root:Max absolute value 1: (4, 7) - Value: 1.591721092384391
Max absolute value 2: (4, 6) - Value: 1.5906196900756528
Max absolute value 3: (4, 5) - Value: 1.5832617523654076
Max absolute value 4: (0, 4) - Value: 0.45474578043628255
Max absolute value 5: (0, 3) - Value: -0.07353717262040585

INFO:root:Sobols samples size: 144
INFO:root:[((6, 'mk_k_r.txt'), 0.6449750506367627), ((1, 'k.txt'), -0.32252455915395967), ((5, 'mi_idx_it_both.txt'), 0.04187997097587191), ((2, 'mi_idx.txt'), 0.01558617773758436), ((8, 't_mi_idx_both.txt'), 0.00946714123875033), ((4, 't.txt'), -0.0021645330470414), ((7, 'mk_mi_idx_r.txt'), 0.00019288241367833363), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (4, 7) - Value: 2.7497925096829876
Max absolute value 2: (4, 6) - Value: 2.7494479312518374
Max absolute value 3: (4, 5) - Value: 2.7355801245779423
Max absolute value 4: (0, 2) - Value: 0.44086298261057355
Max absolute value 5: (0, 5) - Value: 0.440620382174457

INFO:root:Sobol's solving time: 215.68307948112488(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 8 plan: 	[(0, 3943.41), (1, 3943.41), (2, 16405.52), (3, 20094.31), (4, 48237.78), (5, 109081.17), (6, 109083.42), (7, 107038.75)]
INFO:root:Sensitive predicates: [1, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [2], overhead 18.90689730644226s
INFO:root:exp_penalty_w_tol: 	[(0, 19251), (1, 19493), (2, 5029), (3, 7829), (4, 44759), (5, 106376), (6, 106373), (7, 104500)]
INFO:root:### Best plan by std penalty: [5], overhead 18.90689730644226s
INFO:root:std_penalty: 	[(0, 47092.74425198653), (1, 47594.9180862914), (2, 5502.285044726549), (3, 5768.161827269259), (4, 13939.231996514245), (5, 5405.269618767432), (6, 5409.17096131951), (7, 5409.264645672205)]
INFO:root:### Best plan by prob of penalized: [0, 1], overhead 18.90689730644226s
INFO:root:std_penalty: 	[(0, 0.38), (1, 0.38), (2, 0.5), (3, 0.78), (4, 1.0), (5, 1.0), (6, 1.0), (7, 1.0)]
