INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 1.0
INFO:root:Recentered plan cost = 7222.2, plan is: /*+
SeqScan(it)
SeqScan(k)
IndexScan(mk)
IndexScan(mi_idx)
IndexScan(t)
NestLoop ( k mk )
NestLoop ( k mk mi_idx )
NestLoop ( it k mk mi_idx )
NestLoop ( it k mk mi_idx t )
Leading ( ( ( it ( ( k mk ) mi_idx ) ) t ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.9750826839750956), ((1, 'k.txt'), 0.05415704597176176), ((7, 'mk_mi_idx_r.txt'), -0.005896742632531543), ((5, 'mi_idx_it_both.txt'), -0.0016506574883873345), ((2, 'mi_idx.txt'), 0.0009466774027758458), ((9, 't_mk_l.txt'), -0.00021136870305078932), ((4, 't.txt'), -4.2593381857260124e-05), ((8, 't_mi_idx_both.txt'), 3.5096960030321696e-05)]
INFO:root:Max absolute value 1: (0, 4) - Value: 2.794599530649395
Max absolute value 2: (0, 7) - Value: 0.5908425075168185
Max absolute value 3: (0, 6) - Value: 0.5901930715498613
Max absolute value 4: (0, 2) - Value: 0.5898128537588258
Max absolute value 5: (0, 3) - Value: 0.5851301680963652

INFO:root:Sobols samples size: 2304
INFO:root:[((6, 'mk_k_r.txt'), 0.7465376987377988), ((1, 'k.txt'), 0.1259609342484857), ((7, 'mk_mi_idx_r.txt'), -0.009064337530971581), ((2, 'mi_idx.txt'), 0.004305366944430797), ((5, 'mi_idx_it_both.txt'), 0.0011444772510278232), ((9, 't_mk_l.txt'), 0.00015250498892180244), ((8, 't_mi_idx_both.txt'), -8.800972452434085e-05), ((4, 't.txt'), 5.61922431103923e-05)]
INFO:root:Max absolute value 1: (4, 5) - Value: 0.8415281713187851
Max absolute value 2: (4, 6) - Value: 0.7783077526972145
Max absolute value 3: (4, 7) - Value: 0.7750194265523842
Max absolute value 4: (0, 4) - Value: 0.26963036693999654
Max absolute value 5: (0, 1) - Value: 0.03921135978408471

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.5020298692559368), ((7, 'mk_mi_idx_r.txt'), -0.015900615177290415), ((2, 'mi_idx.txt'), 0.007826034457448344), ((5, 'mi_idx_it_both.txt'), 0.007257307961946488), ((1, 'k.txt'), -0.0011005196522103635), ((8, 't_mi_idx_both.txt'), -0.0003201010869236357), ((4, 't.txt'), -0.00024098473414155768), ((9, 't_mk_l.txt'), -0.00022470829020906376)]
INFO:root:Max absolute value 1: (4, 5) - Value: 2.347733600103731
Max absolute value 2: (4, 6) - Value: 2.229057607385281
Max absolute value 3: (4, 7) - Value: 2.222813415589042
Max absolute value 4: (0, 4) - Value: 0.2921501507756893
Max absolute value 5: (0, 1) - Value: 0.1231931190166009

INFO:root:Sobols samples size: 576
INFO:root:[((6, 'mk_k_r.txt'), 0.4650078454822826), ((1, 'k.txt'), -0.19808347769397258), ((5, 'mi_idx_it_both.txt'), 0.002852938530252166), ((7, 'mk_mi_idx_r.txt'), -0.0010140369418737793), ((8, 't_mi_idx_both.txt'), 0.0005749950918223784), ((4, 't.txt'), -0.0001920715302683721), ((2, 'mi_idx.txt'), 0.00017230147677998268), ((9, 't_mk_l.txt'), 4.7354551258395574e-05)]
INFO:root:Max absolute value 1: (4, 6) - Value: 3.2528230501828146
Max absolute value 2: (4, 7) - Value: 3.252152814955346
Max absolute value 3: (4, 5) - Value: 3.1904718761346644
Max absolute value 4: (0, 4) - Value: 0.7103080033801326
Max absolute value 5: (0, 1) - Value: 0.40311119786294675

INFO:root:Sobols samples size: 288
INFO:root:[((1, 'k.txt'), -0.8175329325747634), ((6, 'mk_k_r.txt'), 0.6450369779943619), ((5, 'mi_idx_it_both.txt'), -0.005370176828835064), ((2, 'mi_idx.txt'), -0.0038146704652603025), ((7, 'mk_mi_idx_r.txt'), 0.003482933374609386), ((8, 't_mi_idx_both.txt'), 0.0011561403053599363), ((9, 't_mk_l.txt'), 0.00045195200385200925), ((4, 't.txt'), -0.0003200686977581793)]
INFO:root:Max absolute value 1: (4, 6) - Value: 6.309455519153934
Max absolute value 2: (4, 7) - Value: 6.309277032605521
Max absolute value 3: (4, 5) - Value: 6.140960423564082
Max absolute value 4: (0, 4) - Value: 1.8244874330310725
Max absolute value 5: (0, 1) - Value: 1.0188528063596483

INFO:root:Sobols samples size: 144
INFO:root:[((1, 'k.txt'), -2.303814234264449), ((6, 'mk_k_r.txt'), 0.5192334802649451), ((2, 'mi_idx.txt'), -0.04477818354546153), ((7, 'mk_mi_idx_r.txt'), 0.01217704050846138), ((5, 'mi_idx_it_both.txt'), 0.004812992618350936), ((8, 't_mi_idx_both.txt'), 0.002729545032460917), ((4, 't.txt'), -0.0007788183604586011), ((9, 't_mk_l.txt'), 6.06303935373059e-05)]
INFO:root:Max absolute value 1: (4, 6) - Value: 10.147014750941286
Max absolute value 2: (4, 7) - Value: 10.146725314835198
Max absolute value 3: (4, 5) - Value: 9.867669315784482
Max absolute value 4: (0, 1) - Value: 2.463588413136591
Max absolute value 5: (0, 3) - Value: 2.4629675268357407

INFO:root:Sobol's solving time: 214.82446146011353(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 1.0, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 8 plan: 	[(0, 3946.24), (1, 3947.62), (2, 3953.44), (3, 3947.62), (4, 20215.47), (5, 17076.95), (6, 19643.48), (7, 20166.17)]
INFO:root:Sensitive predicates: [1, 6, 7]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [7], overhead 18.897490739822388s
INFO:root:exp_penalty_w_tol: 	[(0, 95097), (1, 104072), (2, 327833), (3, 141925), (4, 13188), (5, 12674), (6, 13133), (7, 11240)]
INFO:root:### Best plan by std penalty: [5], overhead 18.897490739822388s
INFO:root:std_penalty: 	[(0, 344947.00255737157), (1, 368252.03223039355), (2, 1735307.0852451182), (3, 555735.0697668755), (4, 38332.87218933273), (5, 8187.671963191308), (6, 8557.973010827835), (7, 21682.584389305553)]
INFO:root:### Best plan by prob of penalized: [0, 1], overhead 18.897490739822388s
INFO:root:std_penalty: 	[(0, 0.34), (1, 0.34), (2, 0.56), (3, 0.36), (4, 0.6), (5, 0.84), (6, 0.82), (7, 0.64)]
