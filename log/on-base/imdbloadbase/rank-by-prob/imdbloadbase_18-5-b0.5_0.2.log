INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 305085.65, plan is: /*+
IndexScan(t)
SeqScan(mi_idx)
SeqScan(it2)
IndexScan(ci)
IndexScan(n)
IndexScan(mi)
SeqScan(it1)
HashJoin ( mi_idx it2 )
MergeJoin ( t mi_idx it2 )
NestLoop ( t mi_idx it2 ci )
NestLoop ( t mi_idx it2 ci n )
NestLoop ( t mi_idx it2 ci n mi )
HashJoin ( t mi_idx it2 ci n mi it1 )
Leading ( ( ( ( ( ( t ( mi_idx it2 ) ) ci ) n ) mi ) it1 ) ) */
INFO:root:Sobols samples size: 6144
INFO:root:[((12, 'mi_idx_it_r.txt'), 0.4845371500047009), ((15, 't_mi_idx__it.txt'), 0.2765854144780233), ((9, 'n_ci_both.txt'), 0.0019515418684659005), ((11, 'mi_it_r.txt'), 0.0016768784954615918), ((5, 'n.txt'), -0.0011002006880566125), ((10, 't_ci_r.txt'), 0.0010419615753295183), ((13, 'mi_idx_mi__it.txt'), -0.0002418699104379758), ((14, 't_mi__it.txt'), -0.0002188289791996517), ((0, 'ci.txt'), 0.00017713022595536876), ((7, 'mi_mc_pure.txt'), -3.892642528066381e-05), ((8, 'mi_idx_ci_r.txt'), -2.293198518874781e-05)]
INFO:root:Max absolute value 1: (7, 9) - Value: -0.11900100479258692
Max absolute value 2: (7, 8) - Value: -0.1188889676292397
Max absolute value 3: (7, 10) - Value: 0.06023208217256881
Max absolute value 4: (4, 8) - Value: -0.007235470580907771
Max absolute value 5: (4, 5) - Value: -0.007216619773879068

INFO:root:Sobols samples size: 3072
INFO:root:[((12, 'mi_idx_it_r.txt'), 0.5231410114382893), ((15, 't_mi_idx__it.txt'), 0.22670463635966703), ((9, 'n_ci_both.txt'), 0.0031078039270954613), ((5, 'n.txt'), -0.002484215979705802), ((11, 'mi_it_r.txt'), 0.0022715662812075625), ((10, 't_ci_r.txt'), 0.002234393574553677), ((8, 'mi_idx_ci_r.txt'), 0.0014599085425938047), ((0, 'ci.txt'), -0.0007581760707606525), ((13, 'mi_idx_mi__it.txt'), -6.075540354211642e-05), ((7, 'mi_mc_pure.txt'), 5.48523663158812e-05), ((14, 't_mi__it.txt'), 4.930468519368519e-05)]
INFO:root:Max absolute value 1: (7, 9) - Value: -0.17992360073082472
Max absolute value 2: (7, 8) - Value: -0.1799231911014662
Max absolute value 3: (4, 6) - Value: -0.011136310635568233
Max absolute value 4: (4, 9) - Value: -0.011132385231537681
Max absolute value 5: (4, 8) - Value: -0.011130891739713331

INFO:root:Sobols samples size: 1536
INFO:root:[((12, 'mi_idx_it_r.txt'), 0.6095293179815244), ((15, 't_mi_idx__it.txt'), 0.2699968730105123), ((10, 't_ci_r.txt'), 0.006483844519401927), ((8, 'mi_idx_ci_r.txt'), -0.0017730162403585712), ((5, 'n.txt'), -0.0016420114929766056), ((0, 'ci.txt'), -0.0012912602927010138), ((9, 'n_ci_both.txt'), 0.0003678811829624443), ((14, 't_mi__it.txt'), 0.00023845168345562438), ((7, 'mi_mc_pure.txt'), 0.00015900018274575997), ((11, 'mi_it_r.txt'), 0.00012369142791115957), ((13, 'mi_idx_mi__it.txt'), 2.041826512858224e-05)]
INFO:root:Max absolute value 1: (7, 10) - Value: 0.35997635273639544
Max absolute value 2: (7, 9) - Value: -0.13528991313036812
Max absolute value 3: (7, 8) - Value: -0.13480318196576832
Max absolute value 4: (5, 10) - Value: -0.006123146901897303
Max absolute value 5: (5, 7) - Value: -0.006113273398176355

INFO:root:Sobols samples size: 768
INFO:root:[((12, 'mi_idx_it_r.txt'), 0.6157360039719831), ((15, 't_mi_idx__it.txt'), 0.2635185716742708), ((8, 'mi_idx_ci_r.txt'), -0.0014612822165779875), ((9, 'n_ci_both.txt'), 0.0013993230922732399), ((10, 't_ci_r.txt'), 0.0013005020278515453), ((0, 'ci.txt'), 0.0009414221159197022), ((5, 'n.txt'), -0.0005145777372639549), ((11, 'mi_it_r.txt'), 0.00047061141693069), ((13, 'mi_idx_mi__it.txt'), -0.00016008564624387487), ((7, 'mi_mc_pure.txt'), -0.00012919586989134038), ((14, 't_mi__it.txt'), -4.305950551575006e-05)]
INFO:root:Max absolute value 1: (7, 10) - Value: 0.2047111907974229
Max absolute value 2: (7, 8) - Value: 0.054462230881715264
Max absolute value 3: (7, 9) - Value: 0.054231245979198706
Max absolute value 4: (3, 7) - Value: 0.0038469918037837836
Max absolute value 5: (3, 10) - Value: 0.002906523649675641

INFO:root:Sobols samples size: 384
INFO:root:[((12, 'mi_idx_it_r.txt'), 0.6069963400572865), ((15, 't_mi_idx__it.txt'), 0.2647984650032097), ((5, 'n.txt'), -0.0020152726241405407), ((9, 'n_ci_both.txt'), 0.0008807325653699265), ((7, 'mi_mc_pure.txt'), -0.0006626419864910404), ((11, 'mi_it_r.txt'), -0.0005353267991831016), ((10, 't_ci_r.txt'), 0.00028441504268562564), ((8, 'mi_idx_ci_r.txt'), 0.0001649963200330708), ((0, 'ci.txt'), 0.0001610672930747609), ((13, 'mi_idx_mi__it.txt'), -3.230466353981862e-09), ((14, 't_mi__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (7, 10) - Value: 0.10799436155065056
Max absolute value 2: (7, 9) - Value: -0.05944180963341772
Max absolute value 3: (7, 8) - Value: -0.05944180410555021
Max absolute value 4: (3, 7) - Value: 0.0032473338203574675
Max absolute value 5: (5, 10) - Value: 0.002767403992802564

INFO:root:Sobols samples size: 192
INFO:root:[((12, 'mi_idx_it_r.txt'), 0.5806894212962553), ((15, 't_mi_idx__it.txt'), 0.300229688733829), ((8, 'mi_idx_ci_r.txt'), -0.0009026600246413407), ((0, 'ci.txt'), 0.000541484580652328), ((5, 'n.txt'), 0.0004217791491965124), ((10, 't_ci_r.txt'), -0.00015778570568566493), ((9, 'n_ci_both.txt'), -4.040507625390662e-05), ((7, 'mi_mc_pure.txt'), -4.58961312829386e-06), ((11, 'mi_it_r.txt'), 1.2257082019130513e-06), ((13, 'mi_idx_mi__it.txt'), -3.908154161468584e-09), ((14, 't_mi__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (7, 10) - Value: 0.15207996554753672
Max absolute value 2: (7, 8) - Value: 0.12576474040753718
Max absolute value 3: (7, 9) - Value: 0.12576473259582466
Max absolute value 4: (3, 7) - Value: 0.006670703784560805
Max absolute value 5: (5, 7) - Value: 0.0053451569652720465

INFO:root:Sobol's solving time: 347.2436590194702(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 12
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 14 plan: 	[(0, 159075.85), (1, 386753.34), (2, 388430.01), (3, 357787.3), (4, 354916.99), (5, 354904.42), (6, 354931.44), (7, 371911.81), (8, 80582.39), (9, 80825.79), (10, 80592.94), (11, 81125.41), (12, 80572.36), (13, 82098.28)]
INFO:root:Sensitive predicates: [12, 15]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [4, 5, 6], overhead 39.5601372718811s
INFO:root:exp_penalty_w_tol: 	[(0, 1610176), (1, 85050), (2, 85139), (3, 81531), (4, 81175), (5, 81175), (6, 81175), (7, 85059), (8, 1949644), (9, 1950740), (10, 1949392), (11, 1962284), (12, 1958279), (13, 2715755)]
INFO:root:### Best plan by std penalty: [4, 5, 6], overhead 39.5601372718811s
INFO:root:std_penalty: 	[(0, 2434301.0910116695), (1, 151347.92682540897), (2, 151506.4002910498), (3, 145086.3116012436), (4, 144451.8539891796), (5, 144451.8539891796), (6, 144451.8539891796), (7, 151364.36098419153), (8, 1780866.1285018544), (9, 1781795.3211910957), (10, 1780652.205370475), (11, 1791578.0456630972), (12, 1788183.1207314297), (13, 4112043.716467036)]
INFO:root:### Best plan by prob of penalized: [1, 2, 3, 4, 5, 6, 7], overhead 39.5601372718811s
INFO:root:std_penalty: 	[(0, 1.0), (1, 0.24), (2, 0.24), (3, 0.24), (4, 0.24), (5, 0.24), (6, 0.24), (7, 0.24), (8, 0.76), (9, 0.76), (10, 0.76), (11, 0.76), (12, 0.76), (13, 0.76)]
