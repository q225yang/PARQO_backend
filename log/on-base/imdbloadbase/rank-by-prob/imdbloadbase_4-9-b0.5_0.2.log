INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 18165.95, plan is: /*+
SeqScan(mi_idx)
SeqScan(it)
IndexScan(t)
IndexScan(mk)
IndexScan(k)
HashJoin ( mi_idx it )
NestLoop ( mi_idx it t )
NestLoop ( mi_idx it t mk )
NestLoop ( mi_idx it t mk k )
Leading ( ( ( ( ( mi_idx it ) t ) mk ) k ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.41765770170584654), ((6, 'mk_k_r.txt'), 0.05652490130307244), ((1, 'k.txt'), 0.04760787221691683), ((4, 't.txt'), 0.04037310425521443), ((7, 'mk_mi_idx_r.txt'), 0.03302897351958186), ((8, 't_mi_idx_both.txt'), -0.019268540241373228), ((2, 'mi_idx.txt'), 0.019194953815376004), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (1, 3) - Value: 0.4002458541849529
Max absolute value 2: (6, 7) - Value: 0.182366627633772
Max absolute value 3: (1, 2) - Value: 0.15605223553289008
Max absolute value 4: (3, 7) - Value: -0.1507773290056743
Max absolute value 5: (3, 5) - Value: -0.13214982271953943

INFO:root:Sobols samples size: 2304
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.3074310732468006), ((4, 't.txt'), 0.09200947998803266), ((6, 'mk_k_r.txt'), 0.0781763236998971), ((1, 'k.txt'), 0.05943888675051784), ((2, 'mi_idx.txt'), -0.041969307073917377), ((7, 'mk_mi_idx_r.txt'), -0.04171065000571598), ((8, 't_mi_idx_both.txt'), -0.03363979235072008), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (1, 3) - Value: 0.4526540243121519
Max absolute value 2: (1, 2) - Value: 0.31485473002144493
Max absolute value 3: (1, 7) - Value: 0.25750749589844557
Max absolute value 4: (1, 4) - Value: 0.24857936999819405
Max absolute value 5: (6, 7) - Value: 0.2365870086918056

INFO:root:Sobols samples size: 1152
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.49684978408081376), ((2, 'mi_idx.txt'), 0.1822099212372354), ((1, 'k.txt'), 0.10324123870768016), ((4, 't.txt'), -0.08238132408102372), ((6, 'mk_k_r.txt'), 0.06613897486134081), ((8, 't_mi_idx_both.txt'), 0.04077779716351892), ((7, 'mk_mi_idx_r.txt'), 0.002440109453617344), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 3) - Value: 0.3694283816405753
Max absolute value 2: (2, 6) - Value: 0.3523269603872375
Max absolute value 3: (2, 5) - Value: 0.2492022025231158
Max absolute value 4: (3, 5) - Value: -0.24370047384085614
Max absolute value 5: (2, 4) - Value: 0.23876820910373664

INFO:root:Sobols samples size: 576
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.35506851345849555), ((2, 'mi_idx.txt'), 0.3316905328793048), ((6, 'mk_k_r.txt'), 0.15891956560908446), ((4, 't.txt'), -0.14117260492128422), ((1, 'k.txt'), 0.06852356609196726), ((8, 't_mi_idx_both.txt'), 0.03331306803871118), ((7, 'mk_mi_idx_r.txt'), 0.029801701555418728), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 6) - Value: 0.600778622046089
Max absolute value 2: (1, 4) - Value: -0.582095184075425
Max absolute value 3: (1, 6) - Value: -0.5371909189976039
Max absolute value 4: (1, 5) - Value: -0.5347376527479987
Max absolute value 5: (1, 7) - Value: -0.5113523117028246

INFO:root:Sobols samples size: 288
INFO:root:[((8, 't_mi_idx_both.txt'), -0.39988398841733536), ((2, 'mi_idx.txt'), 0.38664737827524875), ((1, 'k.txt'), 0.36617901000271724), ((4, 't.txt'), -0.20167946000592937), ((6, 'mk_k_r.txt'), 0.15962820210121317), ((7, 'mk_mi_idx_r.txt'), -0.033532332451179925), ((5, 'mi_idx_it_both.txt'), -0.028363551038019064), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (3, 6) - Value: 1.4615641316062142
Max absolute value 2: (3, 4) - Value: 0.9541406384333093
Max absolute value 3: (1, 4) - Value: -0.6812470297262494
Max absolute value 4: (1, 7) - Value: -0.6212418409379072
Max absolute value 5: (1, 5) - Value: -0.6133773390386889

INFO:root:Sobols samples size: 144
INFO:root:[((8, 't_mi_idx_both.txt'), -0.5805821281488863), ((2, 'mi_idx.txt'), -0.23750109044675713), ((5, 'mi_idx_it_both.txt'), 0.2039726745277268), ((1, 'k.txt'), 0.1768513809632731), ((6, 'mk_k_r.txt'), -0.09092581120552488), ((7, 'mk_mi_idx_r.txt'), 0.03384721405408615), ((4, 't.txt'), 0.027924479266171805), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (3, 6) - Value: 3.4248854865155804
Max absolute value 2: (3, 4) - Value: 1.5124874456647548
Max absolute value 3: (3, 7) - Value: 0.5939048596414105
Max absolute value 4: (6, 7) - Value: 0.478801854713536
Max absolute value 5: (3, 5) - Value: 0.4530044759526381

INFO:root:Sobol's solving time: 216.17162203788757(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 2
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 7 plan: 	[(0, 16539.28), (1, 20101.27), (2, 16503.39), (3, 20105.43), (4, 29324.31), (5, 29350.12), (6, 29349.62)]
INFO:root:Sensitive predicates: [5, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [2], overhead 16.627016067504883s
INFO:root:exp_penalty_w_tol: 	[(0, 8469), (1, 7144), (2, 7008), (3, 7145), (4, 8861), (5, 9023), (6, 8918)]
INFO:root:### Best plan by std penalty: [4], overhead 16.627016067504883s
INFO:root:std_penalty: 	[(0, 12057.44126960673), (1, 9080.564614327075), (2, 10614.148727214837), (3, 9104.395720205006), (4, 6349.040613422232), (5, 6465.619856521937), (6, 6390.115171353155)]
INFO:root:### Best plan by prob of penalized: [2], overhead 16.627016067504883s
INFO:root:std_penalty: 	[(0, 0.42), (1, 0.56), (2, 0.38), (3, 0.56), (4, 0.7), (5, 0.7), (6, 0.7)]
