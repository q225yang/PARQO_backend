INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 1.0
INFO:root:Recentered plan cost = 29919.74, plan is: /*+
SeqScan(mi_idx)
SeqScan(it)
IndexScan(t)
IndexScan(mk)
SeqScan(k)
HashJoin ( mi_idx it )
NestLoop ( mi_idx it t )
NestLoop ( mi_idx it t mk )
HashJoin ( mi_idx it t mk k )
Leading ( ( ( ( ( mi_idx it ) t ) mk ) k ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.2578698643998008), ((8, 't_mi_idx_both.txt'), 0.13565825823809058), ((4, 't.txt'), 0.026716952476221627), ((2, 'mi_idx.txt'), 0.025805798277620955), ((1, 'k.txt'), 0.01839588556282924), ((6, 'mk_k_r.txt'), 0.0031296544755596936), ((7, 'mk_mi_idx_r.txt'), 0.0012156447834306846), ((9, 't_mk_l.txt'), 0.00021153273772027962)]
INFO:root:Max absolute value 1: (1, 6) - Value: 1.9262431258908872
Max absolute value 2: (1, 3) - Value: 0.5130130217528501
Max absolute value 3: (1, 2) - Value: 0.44515139292991435
Max absolute value 4: (1, 7) - Value: 0.3421254059606268
Max absolute value 5: (1, 5) - Value: 0.3406380220159855

INFO:root:Sobols samples size: 2304
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.29787097557244246), ((4, 't.txt'), 0.06993050868681566), ((8, 't_mi_idx_both.txt'), -0.03400082106385132), ((1, 'k.txt'), 0.026668123753313695), ((2, 'mi_idx.txt'), -0.010593907000451106), ((6, 'mk_k_r.txt'), 0.004360524731850529), ((7, 'mk_mi_idx_r.txt'), -0.0012208510314152617), ((9, 't_mk_l.txt'), 0.00040764866781736823)]
INFO:root:Max absolute value 1: (6, 7) - Value: 0.3771398468976353
Max absolute value 2: (1, 2) - Value: 0.2703548244968503
Max absolute value 3: (1, 3) - Value: 0.178873772312597
Max absolute value 4: (1, 4) - Value: 0.1471290642072224
Max absolute value 5: (1, 7) - Value: 0.13541150549119121

INFO:root:Sobols samples size: 1152
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.34570214422285034), ((8, 't_mi_idx_both.txt'), 0.069557385855041), ((2, 'mi_idx.txt'), 0.0480217153586789), ((1, 'k.txt'), 0.03243241790411387), ((4, 't.txt'), 0.020456373259547737), ((6, 'mk_k_r.txt'), 0.0029946084177329244), ((7, 'mk_mi_idx_r.txt'), -0.001076477435313185), ((9, 't_mk_l.txt'), -0.0006099424728707024)]
INFO:root:Max absolute value 1: (3, 4) - Value: 1.039038266050128
Max absolute value 2: (3, 5) - Value: 1.0185279763955766
Max absolute value 3: (3, 7) - Value: 1.0165194426987803
Max absolute value 4: (1, 3) - Value: 0.6797687861046626
Max absolute value 5: (3, 6) - Value: 0.5889259362953642

INFO:root:Sobols samples size: 576
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.23462295022629745), ((1, 'k.txt'), 0.06604036496933599), ((8, 't_mi_idx_both.txt'), -0.015471667717461106), ((2, 'mi_idx.txt'), -0.012815053691496756), ((7, 'mk_mi_idx_r.txt'), -0.004101105044647902), ((4, 't.txt'), 0.0035035038658166808), ((9, 't_mk_l.txt'), -0.001190151498160764), ((6, 'mk_k_r.txt'), 0.0009435365606654448)]
INFO:root:Max absolute value 1: (3, 4) - Value: 2.2592557598787133
Max absolute value 2: (3, 5) - Value: 2.2348529607541634
Max absolute value 3: (3, 7) - Value: 2.232336175609714
Max absolute value 4: (3, 6) - Value: 1.5270829597521987
Max absolute value 5: (2, 6) - Value: 0.41019718082025597

INFO:root:Sobols samples size: 288
INFO:root:[((2, 'mi_idx.txt'), -0.2359639398207326), ((5, 'mi_idx_it_both.txt'), 0.1703460522493986), ((4, 't.txt'), 0.0576593223114315), ((1, 'k.txt'), 0.040083050254824205), ((6, 'mk_k_r.txt'), -0.01996459040230953), ((7, 'mk_mi_idx_r.txt'), -0.005391709174506296), ((8, 't_mi_idx_both.txt'), -0.00018827890589727611), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (3, 4) - Value: 2.5979164450307968
Max absolute value 2: (3, 5) - Value: 2.5572101486439958
Max absolute value 3: (3, 7) - Value: 2.5541918260714507
Max absolute value 4: (3, 6) - Value: 1.5436175400184355
Max absolute value 5: (1, 6) - Value: 0.4490510004650236

INFO:root:Sobols samples size: 144
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.3403165424979508), ((8, 't_mi_idx_both.txt'), -0.16327915922016922), ((6, 'mk_k_r.txt'), -0.0995510446951616), ((2, 'mi_idx.txt'), -0.08135414255506496), ((1, 'k.txt'), 0.04444385097540773), ((7, 'mk_mi_idx_r.txt'), -0.026795612323094065), ((4, 't.txt'), 0.001944543029426353), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (3, 6) - Value: 2.0282188285187717
Max absolute value 2: (1, 6) - Value: 1.7224879403146727
Max absolute value 3: (3, 4) - Value: 0.8712149226907567
Max absolute value 4: (1, 4) - Value: 0.7849263765945768
Max absolute value 5: (1, 5) - Value: 0.7048385623132681

INFO:root:Sobol's solving time: 215.60398054122925(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 2
INFO:root:Instance id = None, Error div = 2, bandwidth = 1.0, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 7 plan: 	[(0, 17876.07), (1, 20082.86), (2, 17365.78), (3, 20059.98), (4, 30986.64), (5, 31146.81), (6, 31139.82)]
INFO:root:Sensitive predicates: [4, 5, 8]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [4], overhead 16.646430492401123s
INFO:root:exp_penalty_w_tol: 	[(0, 43449), (1, 21486), (2, 81928), (3, 38880), (4, 4346), (5, 4738), (6, 4483)]
INFO:root:### Best plan by std penalty: [4], overhead 16.646430492401123s
INFO:root:std_penalty: 	[(0, 51035.85099412327), (1, 28166.913667957302), (2, 346447.0659388141), (3, 127643.9582823453), (4, 6569.56625529187), (5, 7127.501827406447), (6, 6764.6597236798725)]
INFO:root:### Best plan by prob of penalized: [4, 5, 6], overhead 16.646430492401123s
INFO:root:std_penalty: 	[(0, 0.7), (1, 0.52), (2, 0.64), (3, 0.52), (4, 0.32), (5, 0.32), (6, 0.32)]
