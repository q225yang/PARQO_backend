INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 8118.57, plan is: /*+
SeqScan(cct1)
IndexScan(cc)
SeqScan(k)
IndexScan(mk)
SeqScan(cct2)
IndexScan(t)
SeqScan(kt)
IndexScan(ci)
IndexScan(chn)
IndexOnlyScan(n)
NestLoop ( cct1 cc )
NestLoop ( k mk )
HashJoin ( cct1 cc k mk )
HashJoin ( cct1 cc k mk cct2 )
NestLoop ( cct1 cc k mk cct2 t )
HashJoin ( cct1 cc k mk cct2 t kt )
NestLoop ( cct1 cc k mk cct2 t kt ci )
NestLoop ( cct1 cc k mk cct2 t kt ci chn )
NestLoop ( cct1 cc k mk cct2 t kt ci chn n )
Leading ( ( ( ( ( ( ( ( ( cct1 cc ) ( k mk ) ) cct2 ) t ) kt ) ci ) chn ) n ) ) */
INFO:root:Sobols samples size: 9216
INFO:root:[((19, 'mk_k_r.txt'), 0.04601977771650122), ((1, 'cct.txt'), 0.03711719415486683), ((11, 'cct_cc_2_l.txt'), 0.036183468014905996), ((14, 't_cc_l.txt'), 0.028798086707469528), ((9, 't.txt'), 0.02844267010877518), ((20, 't_kt_both.txt'), -0.027530386470961152), ((2, 'cct.txt'), 0.021684675510105878), ((10, 'cct_cc_1_l.txt'), 0.0167160981923066), ((13, 'mk_cc__cct.txt'), -0.015453693429589596), ((12, 'ci_cc__cct.txt'), 0.01302061698844406), ((3, 'chn.txt'), 0.012274446940834122), ((15, 'ci_chn_r.txt'), -0.008104138384933044), ((17, 'n_ci__chn.txt'), 0.0015149465853479447), ((5, 'k.txt'), 0.0005022584451646162), ((16, 'mk_ci__chn.txt'), -7.506841456313643e-05), ((21, 't_mk_l.txt'), -4.7020271725371106e-05), ((18, 't_ci_l.txt'), 3.964171146854201e-05)]
INFO:root:Max absolute value 1: (2, 4) - Value: 0.7485892332731028
Max absolute value 2: (2, 3) - Value: 0.4835914119087373
Max absolute value 3: (2, 5) - Value: 0.4500745819039711
Max absolute value 4: (2, 8) - Value: 0.30029828406254716
Max absolute value 5: (8, 10) - Value: 0.2822054359635389

INFO:root:Sobols samples size: 4608
INFO:root:[((19, 'mk_k_r.txt'), 0.05510772178053386), ((15, 'ci_chn_r.txt'), 0.05251654262615179), ((9, 't.txt'), 0.03426330681197447), ((20, 't_kt_both.txt'), 0.023761298060621317), ((10, 'cct_cc_1_l.txt'), 0.020634980827862078), ((3, 'chn.txt'), 0.019262643312084146), ((12, 'ci_cc__cct.txt'), 0.015055007518796862), ((13, 'mk_cc__cct.txt'), -0.012861990505443397), ((2, 'cct.txt'), 0.011443351985779707), ((11, 'cct_cc_2_l.txt'), -0.008386986832616143), ((1, 'cct.txt'), 0.006574708011934293), ((5, 'k.txt'), 0.002398761832629799), ((17, 'n_ci__chn.txt'), 0.0011519118001319883), ((14, 't_cc_l.txt'), -0.0006783542471153172), ((16, 'mk_ci__chn.txt'), -0.00016283839188180058), ((21, 't_mk_l.txt'), 9.118164673553788e-06), ((18, 't_ci_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 4) - Value: 0.7783031513290334
Max absolute value 2: (2, 3) - Value: 0.5101592846316501
Max absolute value 3: (2, 5) - Value: 0.4565402653875835
Max absolute value 4: (6, 10) - Value: 0.3107323827246669
Max absolute value 5: (2, 8) - Value: 0.306689156540831

INFO:root:Sobols samples size: 2304
INFO:root:[((15, 'ci_chn_r.txt'), 0.10928868277608333), ((19, 'mk_k_r.txt'), 0.07488604799566805), ((20, 't_kt_both.txt'), 0.057349193280416745), ((3, 'chn.txt'), 0.04514478339361099), ((10, 'cct_cc_1_l.txt'), 0.03224510456238752), ((13, 'mk_cc__cct.txt'), -0.0255968576980024), ((11, 'cct_cc_2_l.txt'), -0.022167194896875495), ((2, 'cct.txt'), 0.017271463529731634), ((14, 't_cc_l.txt'), 0.009738616559726517), ((9, 't.txt'), 0.009273365184461896), ((1, 'cct.txt'), 0.007036064199934782), ((12, 'ci_cc__cct.txt'), 0.0019435482877428391), ((5, 'k.txt'), -0.001658710264398465), ((17, 'n_ci__chn.txt'), 0.0013209768279986468), ((21, 't_mk_l.txt'), 1.0825265760942872e-05), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (6, 10) - Value: 0.6014428161470806
Max absolute value 2: (8, 10) - Value: 0.5840652013183587
Max absolute value 3: (6, 14) - Value: 0.4936962173372557
Max absolute value 4: (8, 14) - Value: 0.45880344916685917
Max absolute value 5: (6, 15) - Value: 0.4511682685283007

INFO:root:Sobols samples size: 1152
INFO:root:[((15, 'ci_chn_r.txt'), 0.11632680580440607), ((19, 'mk_k_r.txt'), 0.06399367092123762), ((3, 'chn.txt'), 0.06365549472491382), ((20, 't_kt_both.txt'), 0.054250877406218444), ((10, 'cct_cc_1_l.txt'), 0.03914352582994883), ((13, 'mk_cc__cct.txt'), -0.02832073893486186), ((2, 'cct.txt'), 0.02750248194693606), ((11, 'cct_cc_2_l.txt'), -0.02236888139101383), ((14, 't_cc_l.txt'), 0.021622201826460262), ((1, 'cct.txt'), 0.013576952104569466), ((9, 't.txt'), 0.010751648583352102), ((17, 'n_ci__chn.txt'), 0.001800767116143112), ((12, 'ci_cc__cct.txt'), 0.0009020961180172242), ((21, 't_mk_l.txt'), 5.544212982878424e-06), ((5, 'k.txt'), -1.0500393166036465e-06), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (6, 10) - Value: 0.6237838769743043
Max absolute value 2: (8, 10) - Value: 0.6084812401063537
Max absolute value 3: (6, 14) - Value: 0.5112862222008244
Max absolute value 4: (8, 14) - Value: 0.47603942100612084
Max absolute value 5: (6, 15) - Value: 0.46608505396512884

INFO:root:Sobols samples size: 576
INFO:root:[((15, 'ci_chn_r.txt'), 2.027747371723885), ((19, 'mk_k_r.txt'), 1.456447844171517), ((20, 't_kt_both.txt'), 1.3637404299188698), ((13, 'mk_cc__cct.txt'), -0.6263552843479825), ((14, 't_cc_l.txt'), -0.5233363732895443), ((11, 'cct_cc_2_l.txt'), -0.5054920253525363), ((3, 'chn.txt'), 0.35562433350569933), ((9, 't.txt'), 0.3070517287036205), ((10, 'cct_cc_1_l.txt'), 0.1801525431547476), ((1, 'cct.txt'), 0.09203287427746), ((2, 'cct.txt'), -0.03148351040638019), ((17, 'n_ci__chn.txt'), 0.03031675713712031), ((5, 'k.txt'), 0.014193331628481843), ((12, 'ci_cc__cct.txt'), -0.005151725571479707), ((21, 't_mk_l.txt'), 1.2927137391721084e-05), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (6, 10) - Value: 12.639566737537464
Max absolute value 2: (8, 10) - Value: 12.346651806847245
Max absolute value 3: (6, 14) - Value: 9.894600436667245
Max absolute value 4: (8, 14) - Value: 9.697199121005006
Max absolute value 5: (6, 15) - Value: 9.486274387110752

INFO:root:Sobols samples size: 288
INFO:root:[((1, 'cct.txt'), 0.692201298522194), ((11, 'cct_cc_2_l.txt'), 0.5230181305953541), ((5, 'k.txt'), 0.0957888897821515), ((14, 't_cc_l.txt'), -0.022036504017871904), ((10, 'cct_cc_1_l.txt'), -0.017246737585045684), ((19, 'mk_k_r.txt'), -0.009275178815694961), ((15, 'ci_chn_r.txt'), 0.004987545664224227), ((12, 'ci_cc__cct.txt'), 0.003018334387542385), ((20, 't_kt_both.txt'), 0.0016015734062186872), ((3, 'chn.txt'), 0.001235594957939), ((9, 't.txt'), 0.000612136095635934), ((17, 'n_ci__chn.txt'), -0.0002660869402259627), ((13, 'mk_cc__cct.txt'), 0.00010969051266001093), ((2, 'cct.txt'), 6.329494675626272e-05), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (0, 6) - Value: -1.0337353071349655
Max absolute value 2: (5, 6) - Value: 0.9524806276458773
Max absolute value 3: (5, 9) - Value: -0.6153134470863337
Max absolute value 4: (0, 3) - Value: -0.5987706334482341
Max absolute value 5: (5, 12) - Value: -0.5923014139490435

INFO:root:Sobols samples size: 144
INFO:root:[((14, 't_cc_l.txt'), 2.1293213856998507), ((19, 'mk_k_r.txt'), 0.9028133169466989), ((1, 'cct.txt'), 0.8636161070261608), ((15, 'ci_chn_r.txt'), -0.612792424063187), ((11, 'cct_cc_2_l.txt'), -0.3328783817572404), ((12, 'ci_cc__cct.txt'), -0.2917110004656526), ((20, 't_kt_both.txt'), -0.15475782562719526), ((3, 'chn.txt'), -0.11942083403108676), ((9, 't.txt'), -0.05956992878891548), ((10, 'cct_cc_1_l.txt'), 0.038416355700385686), ((17, 'n_ci__chn.txt'), 0.02570607862249365), ((13, 'mk_cc__cct.txt'), -0.00331397086517458), ((2, 'cct.txt'), 0.001202467443248081), ((5, 'k.txt'), 0.0), ((16, 'mk_ci__chn.txt'), 0.0), ((18, 't_ci_l.txt'), 0.0), ((21, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (10, 14) - Value: 17.26260482203766
Max absolute value 2: (10, 12) - Value: 6.415072034901168
Max absolute value 3: (10, 16) - Value: 6.090181407756979
Max absolute value 4: (10, 13) - Value: 6.090181407756979
Max absolute value 5: (10, 11) - Value: 6.090181407756979

INFO:root:Sobol's solving time: 831.2925024032593(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 5
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 14 plan: 	[(0, 6549.7), (1, 6528.3), (2, 6529.21), (3, 6528.03), (4, 6523.93), (5, 3946.08), (6, 3946.1), (7, 3947.01), (8, 3947.0), (9, 84780.13), (10, 3999.24), (11, 84843.65), (12, 84786.99), (13, 84786.99)]
INFO:root:Sensitive predicates: [1, 11, 19]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [4], overhead 63.28553009033203s
INFO:root:exp_penalty_w_tol: 	[(0, 35347), (1, 5962), (2, 5908), (3, 28633), (4, 4132), (5, 17026), (6, 11150), (7, 11071), (8, 11655), (9, 60350), (10, 154917), (11, 117671), (12, 70449), (13, 70401)]
INFO:root:### Best plan by std penalty: [2], overhead 63.28553009033203s
INFO:root:std_penalty: 	[(0, 43955.32745930097), (1, 5055.473273304583), (2, 4974.84246232939), (3, 56104.845439087425), (4, 6898.727626338305), (5, 35762.64006782753), (6, 14134.31829602402), (7, 14044.20953632153), (8, 14728.410440905536), (9, 9606.177009230527), (10, 183211.84399735348), (11, 73776.31608284719), (12, 19614.570944075633), (13, 19605.263370462548)]
INFO:root:### Best plan by prob of penalized: [6, 7, 8], overhead 63.28553009033203s
INFO:root:std_penalty: 	[(0, 1.0), (1, 0.9), (2, 0.9), (3, 1.0), (4, 0.82), (5, 0.7), (6, 0.62), (7, 0.62), (8, 0.62), (9, 1.0), (10, 0.8), (11, 1.0), (12, 1.0), (13, 1.0)]
