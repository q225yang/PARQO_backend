INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 33591.59, plan is: /*+
SeqScan(it)
SeqScan(k)
IndexScan(mk)
IndexScan(t)
IndexScan(mi_idx)
NestLoop ( k mk )
NestLoop ( k mk t )
NestLoop ( k mk t mi_idx )
NestLoop ( it k mk t mi_idx )
Leading ( ( it ( ( ( k mk ) t ) mi_idx ) ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((1, 'k.txt'), 0.47906435483084653), ((6, 'mk_k_r.txt'), 0.3791583009818806), ((5, 'mi_idx_it_both.txt'), 0.017681126054688235), ((2, 'mi_idx.txt'), -0.0030800619015751447), ((4, 't.txt'), -0.0004024210986488703), ((7, 'mk_mi_idx_r.txt'), -0.0003666889091134369), ((9, 't_mk_l.txt'), -0.00012318106685156236), ((8, 't_mi_idx_both.txt'), -8.265269695480529e-05)]
INFO:root:Max absolute value 1: (0, 5) - Value: -0.3191970784245484
Max absolute value 2: (0, 7) - Value: -0.31851415265417193
Max absolute value 3: (0, 6) - Value: -0.31816791134742667
Max absolute value 4: (0, 2) - Value: -0.31559544117655286
Max absolute value 5: (0, 1) - Value: -0.3155139970861726

INFO:root:Sobols samples size: 2304
INFO:root:[((1, 'k.txt'), 0.7693840479506477), ((6, 'mk_k_r.txt'), 0.1783188013739944), ((5, 'mi_idx_it_both.txt'), 0.027171758148593822), ((2, 'mi_idx.txt'), -0.006449084077855968), ((7, 'mk_mi_idx_r.txt'), 0.002134201469093439), ((4, 't.txt'), -0.0015686057594873858), ((8, 't_mi_idx_both.txt'), 7.267239632536151e-05), ((9, 't_mk_l.txt'), 2.785753422424353e-05)]
INFO:root:Max absolute value 1: (0, 3) - Value: -0.5364025789169241
Max absolute value 2: (0, 5) - Value: -0.5344513727586521
Max absolute value 3: (0, 6) - Value: -0.5328514652969749
Max absolute value 4: (0, 7) - Value: -0.5325268140599851
Max absolute value 5: (0, 2) - Value: -0.5291020896005794

INFO:root:Sobols samples size: 1152
INFO:root:[((1, 'k.txt'), 0.8463532035439125), ((6, 'mk_k_r.txt'), 0.19442584588008863), ((5, 'mi_idx_it_both.txt'), 0.008181972755328558), ((2, 'mi_idx.txt'), -0.004738515121945451), ((7, 'mk_mi_idx_r.txt'), 0.004691173895193905), ((4, 't.txt'), 0.0009914324792842013), ((9, 't_mk_l.txt'), 0.00019356881360527392), ((8, 't_mi_idx_both.txt'), 8.333045440090944e-05)]
INFO:root:Max absolute value 1: (0, 4) - Value: -0.5875357742205839
Max absolute value 2: (0, 5) - Value: -0.4664136465195685
Max absolute value 3: (0, 6) - Value: -0.46265215920605746
Max absolute value 4: (0, 7) - Value: -0.4619293572347645
Max absolute value 5: (0, 2) - Value: -0.4584029913693404

INFO:root:Sobols samples size: 576
INFO:root:[((1, 'k.txt'), 0.8376046608025259), ((6, 'mk_k_r.txt'), 0.04356848846585928), ((5, 'mi_idx_it_both.txt'), 0.021621351226467488), ((7, 'mk_mi_idx_r.txt'), 0.0063822666814318885), ((2, 'mi_idx.txt'), -0.005748529172631267), ((4, 't.txt'), -0.00037019866171443875), ((9, 't_mk_l.txt'), 6.648661753314243e-05), ((8, 't_mi_idx_both.txt'), 4.5189843510705014e-05)]
INFO:root:Max absolute value 1: (0, 4) - Value: -0.5775384260192115
Max absolute value 2: (4, 5) - Value: 0.5000855980931327
Max absolute value 3: (4, 7) - Value: 0.49956305790379685
Max absolute value 4: (4, 6) - Value: 0.49941656424252884
Max absolute value 5: (0, 5) - Value: -0.3738464128220754

INFO:root:Sobols samples size: 288
INFO:root:[((1, 'k.txt'), 2.027387820499551), ((5, 'mi_idx_it_both.txt'), 0.1067017007859097), ((6, 'mk_k_r.txt'), -0.037159340751063766), ((7, 'mk_mi_idx_r.txt'), 0.020082698939281267), ((2, 'mi_idx.txt'), -0.00345803934590236), ((4, 't.txt'), -0.0032225931335472333), ((8, 't_mi_idx_both.txt'), 6.737110220128914e-05), ((9, 't_mk_l.txt'), -2.354476739161447e-06)]
INFO:root:Max absolute value 1: (0, 3) - Value: -2.198582917478874
Max absolute value 2: (0, 5) - Value: -2.1700702042492273
Max absolute value 3: (0, 6) - Value: -2.161608025636595
Max absolute value 4: (0, 7) - Value: -2.1615474618415895
Max absolute value 5: (0, 1) - Value: -2.1615130866269285

INFO:root:Sobols samples size: 144
INFO:root:[((6, 'mk_k_r.txt'), 0.2716099789193568), ((5, 'mi_idx_it_both.txt'), 0.16176697807899065), ((1, 'k.txt'), 0.057935417509166504), ((2, 'mi_idx.txt'), 0.0018646561050259863), ((4, 't.txt'), -0.00011414879141199153), ((8, 't_mi_idx_both.txt'), 1.0669098629410983e-05), ((9, 't_mk_l.txt'), 6.055069095299909e-06), ((7, 'mk_mi_idx_r.txt'), -5.45278332224476e-06)]
INFO:root:Max absolute value 1: (4, 5) - Value: 4.324009524729055
Max absolute value 2: (4, 7) - Value: 4.322500913018484
Max absolute value 3: (4, 6) - Value: 4.321125708386223
Max absolute value 4: (0, 3) - Value: -0.20360240003422173
Max absolute value 5: (0, 2) - Value: -0.20023979656641988

INFO:root:Sobol's solving time: 217.16989922523499(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 4 plan: 	[(0, 13285.82), (1, 13285.82), (2, 31228.01), (3, 50453.51)]
INFO:root:Sensitive predicates: [1, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [2], overhead 9.65605640411377s
INFO:root:exp_penalty_w_tol: 	[(0, 25575), (1, 25630), (2, 9517), (3, 19771)]
INFO:root:### Best plan by std penalty: [2], overhead 9.65605640411377s
INFO:root:std_penalty: 	[(0, 63291.55097595149), (1, 63401.78426831033), (2, 11411.664541345228), (3, 13369.735598689129)]
INFO:root:### Best plan by prob of penalized: [0, 1], overhead 9.65605640411377s
INFO:root:std_penalty: 	[(0, 0.4), (1, 0.4), (2, 0.56), (3, 0.8)]
