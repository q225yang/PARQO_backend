INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 7615.67, plan is: /*+
SeqScan(k)
IndexScan(mk)
IndexScan(mi_idx)
SeqScan(it)
IndexScan(t)
NestLoop ( k mk )
NestLoop ( k mk mi_idx )
HashJoin ( k mk mi_idx it )
NestLoop ( k mk mi_idx it t )
Leading ( ( ( ( ( k mk ) mi_idx ) it ) t ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.5842548116958428), ((7, 'mk_mi_idx_r.txt'), 0.09944295898700191), ((5, 'mi_idx_it_both.txt'), 0.06858195778271291), ((2, 'mi_idx.txt'), 0.034229886551762595), ((1, 'k.txt'), 0.013445283425234981), ((4, 't.txt'), 0.006694389226998653), ((9, 't_mk_l.txt'), -0.003032909420486929), ((8, 't_mi_idx_both.txt'), 0.0011094241840639287)]
INFO:root:Max absolute value 1: (4, 5) - Value: 0.7837785956985567
Max absolute value 2: (0, 4) - Value: 0.5794060319336958
Max absolute value 3: (0, 3) - Value: 0.2850938150137612
Max absolute value 4: (3, 4) - Value: 0.23206353281234682
Max absolute value 5: (3, 5) - Value: 0.23157158040598436

INFO:root:Sobols samples size: 2304
INFO:root:[((6, 'mk_k_r.txt'), 0.49466250143878593), ((5, 'mi_idx_it_both.txt'), 0.08793771479648986), ((7, 'mk_mi_idx_r.txt'), 0.04676509831364034), ((2, 'mi_idx.txt'), 0.010779062427862016), ((1, 'k.txt'), -0.005520465823317562), ((9, 't_mk_l.txt'), -0.0025736544937707147), ((8, 't_mi_idx_both.txt'), 8.816315387330939e-05), ((4, 't.txt'), -8.572089267580632e-05)]
INFO:root:Max absolute value 1: (4, 5) - Value: 0.572852639278026
Max absolute value 2: (4, 6) - Value: 0.4386741916148741
Max absolute value 3: (4, 7) - Value: 0.4347824110549534
Max absolute value 4: (0, 4) - Value: 0.20153756814218776
Max absolute value 5: (3, 4) - Value: -0.1054304652524139

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.31849167967798936), ((5, 'mi_idx_it_both.txt'), 0.07923493171151531), ((7, 'mk_mi_idx_r.txt'), 0.06342800130451881), ((1, 'k.txt'), -0.046355325375412385), ((2, 'mi_idx.txt'), 0.02514391422830205), ((9, 't_mk_l.txt'), -0.004908089355791808), ((4, 't.txt'), 0.0006414777550290336), ((8, 't_mi_idx_both.txt'), -0.00011398734950698427)]
INFO:root:Max absolute value 1: (4, 5) - Value: 1.220836649577833
Max absolute value 2: (4, 6) - Value: 0.9954963114790448
Max absolute value 3: (4, 7) - Value: 0.9910733962833302
Max absolute value 4: (0, 4) - Value: 0.17612760583960052
Max absolute value 5: (0, 3) - Value: 0.12391132997136321

INFO:root:Sobols samples size: 576
INFO:root:[((6, 'mk_k_r.txt'), 0.22036096959149923), ((5, 'mi_idx_it_both.txt'), 0.11182898751659036), ((7, 'mk_mi_idx_r.txt'), 0.09954708488400918), ((1, 'k.txt'), -0.026230879030769847), ((2, 'mi_idx.txt'), 0.015087006308395644), ((9, 't_mk_l.txt'), -0.006417118121509529), ((4, 't.txt'), 0.00401961529446135), ((8, 't_mi_idx_both.txt'), 0.0011009292988946894)]
INFO:root:Max absolute value 1: (4, 5) - Value: 1.110369777131663
Max absolute value 2: (4, 7) - Value: 1.0921174989213893
Max absolute value 3: (4, 6) - Value: 1.071027205999055
Max absolute value 4: (0, 4) - Value: 0.24458071553191754
Max absolute value 5: (5, 6) - Value: -0.14617994138557308

INFO:root:Sobols samples size: 288
INFO:root:[((6, 'mk_k_r.txt'), 0.42043732386950927), ((1, 'k.txt'), -0.1823511621210179), ((7, 'mk_mi_idx_r.txt'), 0.06591405223667489), ((5, 'mi_idx_it_both.txt'), 0.049621017488239334), ((2, 'mi_idx.txt'), -0.009288822763966203), ((4, 't.txt'), -0.009147018077020837), ((9, 't_mk_l.txt'), -0.007046411501131679), ((8, 't_mi_idx_both.txt'), -0.000166151721017293)]
INFO:root:Max absolute value 1: (4, 7) - Value: 0.9804901164079903
Max absolute value 2: (4, 6) - Value: 0.9385458592152611
Max absolute value 3: (0, 4) - Value: 0.5172533508977883
Max absolute value 4: (4, 5) - Value: 0.39288180935412176
Max absolute value 5: (0, 3) - Value: 0.28904816557096935

INFO:root:Sobols samples size: 144
INFO:root:[((6, 'mk_k_r.txt'), 0.4524141542394561), ((1, 'k.txt'), -0.37994460863767077), ((7, 'mk_mi_idx_r.txt'), 0.12828180222349073), ((5, 'mi_idx_it_both.txt'), 0.11117177399963653), ((4, 't.txt'), -0.018453809223155086), ((9, 't_mk_l.txt'), -0.01531140268502506), ((2, 'mi_idx.txt'), -0.012626315273097825), ((8, 't_mi_idx_both.txt'), -0.0005151394614888816)]
INFO:root:Max absolute value 1: (4, 7) - Value: 1.2432325237129942
Max absolute value 2: (4, 6) - Value: 1.1921366641662507
Max absolute value 3: (4, 5) - Value: 0.5222742943402299
Max absolute value 4: (0, 7) - Value: 0.455403152623082
Max absolute value 5: (0, 1) - Value: 0.45519137561731

INFO:root:Sobol's solving time: 215.58588886260986(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 1
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 5 plan: 	[(0, 3943.86), (1, 3943.05), (2, 4074.72), (3, 25835.17), (4, 22241.13)]
INFO:root:Sensitive predicates: [6, 7]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [1], overhead 11.923348188400269s
INFO:root:exp_penalty_w_tol: 	[(0, 5744), (1, 5070), (2, 116270), (3, 27460), (4, 6276)]
INFO:root:### Best plan by std penalty: [4], overhead 11.923348188400269s
INFO:root:std_penalty: 	[(0, 12232.528975633195), (1, 11256.777741114061), (2, 157087.10375062985), (3, 7980.282285733981), (4, 7268.262970720188)]
INFO:root:### Best plan by prob of penalized: [1], overhead 11.923348188400269s
INFO:root:std_penalty: 	[(0, 0.36), (1, 0.32), (2, 0.9), (3, 1.0), (4, 0.48)]
