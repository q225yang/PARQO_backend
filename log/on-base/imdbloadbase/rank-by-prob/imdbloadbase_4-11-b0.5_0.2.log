INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 25036.52, plan is: /*+
SeqScan(mi_idx)
SeqScan(it)
IndexScan(t)
IndexScan(mk)
IndexScan(k)
HashJoin ( mi_idx it )
NestLoop ( mi_idx it t )
NestLoop ( mi_idx it t mk )
NestLoop ( mi_idx it t mk k )
Leading ( ( ( ( ( mi_idx it ) t ) mk ) k ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.9254447709319292), ((6, 'mk_k_r.txt'), 0.02640661408761122), ((2, 'mi_idx.txt'), 0.019579524610899166), ((1, 'k.txt'), 0.016234620970134877), ((7, 'mk_mi_idx_r.txt'), -0.0013240953501035683), ((4, 't.txt'), -4.811913492695504e-05), ((8, 't_mi_idx_both.txt'), 7.698840818693252e-06), ((9, 't_mk_l.txt'), -2.7417329217439654e-06)]
INFO:root:Max absolute value 1: (1, 3) - Value: 0.2620528015952469
Max absolute value 2: (3, 6) - Value: -0.1663737492209219
Max absolute value 3: (3, 7) - Value: -0.16634552587132317
Max absolute value 4: (3, 5) - Value: -0.16369592490796728
Max absolute value 5: (3, 4) - Value: -0.12549875415993325

INFO:root:Sobols samples size: 2304
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.75654190885362), ((2, 'mi_idx.txt'), -0.041126541681709684), ((6, 'mk_k_r.txt'), 0.030694971685247097), ((1, 'k.txt'), 0.0056638226923891154), ((7, 'mk_mi_idx_r.txt'), -0.0008207131668764891), ((4, 't.txt'), -9.914602317349017e-05), ((9, 't_mk_l.txt'), -3.515432956728716e-06), ((8, 't_mi_idx_both.txt'), 2.8532441782884897e-06)]
INFO:root:Max absolute value 1: (1, 3) - Value: 0.34383107038471405
Max absolute value 2: (1, 2) - Value: 0.2621682562903226
Max absolute value 3: (1, 7) - Value: 0.2621490732702596
Max absolute value 4: (1, 6) - Value: 0.26212575050907744
Max absolute value 5: (1, 5) - Value: 0.2606639641468755

INFO:root:Sobols samples size: 1152
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.9907794192153303), ((1, 'k.txt'), 0.013046285970741525), ((7, 'mk_mi_idx_r.txt'), -0.0025670610428838577), ((2, 'mi_idx.txt'), 0.001506774358434936), ((6, 'mk_k_r.txt'), -0.0013397540189581361), ((8, 't_mi_idx_both.txt'), 4.8202849949157846e-05), ((9, 't_mk_l.txt'), -7.998240349456592e-06), ((4, 't.txt'), 5.735582495189619e-06)]
INFO:root:Max absolute value 1: (1, 3) - Value: 0.2916480294083099
Max absolute value 2: (3, 6) - Value: -0.18389638097337507
Max absolute value 3: (3, 7) - Value: -0.18386884417024799
Max absolute value 4: (1, 7) - Value: 0.1804574512380405
Max absolute value 5: (1, 2) - Value: 0.18044155051369878

INFO:root:Sobols samples size: 576
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.9745851702656493), ((2, 'mi_idx.txt'), 0.15038763903365812), ((6, 'mk_k_r.txt'), 0.039421360256312286), ((1, 'k.txt'), 0.03383680345076606), ((7, 'mk_mi_idx_r.txt'), -0.0031831232855840386), ((8, 't_mi_idx_both.txt'), 0.00010309037598655865), ((4, 't.txt'), 6.834434107477387e-05), ((9, 't_mk_l.txt'), -1.7869482047161612e-05)]
INFO:root:Max absolute value 1: (1, 3) - Value: -0.22171440175711243
Max absolute value 2: (1, 4) - Value: -0.1726927506262853
Max absolute value 3: (1, 5) - Value: -0.14095237494520274
Max absolute value 4: (1, 6) - Value: -0.13948254406587948
Max absolute value 5: (1, 2) - Value: -0.13945661073060367

INFO:root:Sobols samples size: 288
INFO:root:[((5, 'mi_idx_it_both.txt'), 0.9118249261402678), ((2, 'mi_idx.txt'), 0.11932311584883919), ((1, 'k.txt'), 0.06204985327974336), ((6, 'mk_k_r.txt'), 0.022744441259083974), ((7, 'mk_mi_idx_r.txt'), -0.0026864845421838254), ((4, 't.txt'), 0.00020348233949830748), ((8, 't_mi_idx_both.txt'), -2.3773357809447457e-05), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (3, 4) - Value: 0.5335569839852278
Max absolute value 2: (3, 5) - Value: 0.42183375346264723
Max absolute value 3: (3, 6) - Value: 0.4168108437190916
Max absolute value 4: (3, 7) - Value: 0.4167911692676294
Max absolute value 5: (1, 4) - Value: -0.17301148303382488

INFO:root:Sobols samples size: 144
INFO:root:[((5, 'mi_idx_it_both.txt'), 1.262398923534442), ((6, 'mk_k_r.txt'), -0.06178518780505746), ((7, 'mk_mi_idx_r.txt'), -0.013887845712933774), ((2, 'mi_idx.txt'), 0.006844512567894731), ((1, 'k.txt'), 0.0023414664812496837), ((8, 't_mi_idx_both.txt'), -3.957437019294918e-05), ((4, 't.txt'), -1.523929916628744e-06), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (3, 4) - Value: 0.6325211401087607
Max absolute value 2: (3, 5) - Value: 0.38543675931375654
Max absolute value 3: (3, 6) - Value: 0.36761931167823747
Max absolute value 4: (3, 7) - Value: 0.3675772736324223
Max absolute value 5: (0, 1) - Value: 0.17648401789788676

INFO:root:Sobol's solving time: 217.01409673690796(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 8 plan: 	[(0, 14872.82), (1, 25985.12), (2, 18068.42), (3, 31490.24), (4, 32897.47), (5, 32843.33), (6, 48080.4), (7, 48080.13)]
INFO:root:Sensitive predicates: [5, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [3], overhead 18.97561812400818s
INFO:root:exp_penalty_w_tol: 	[(0, 30942), (1, 332309), (2, 43172), (3, 10613), (4, 21883), (5, 13875), (6, 18306), (7, 18306)]
INFO:root:### Best plan by std penalty: [3], overhead 18.97561812400818s
INFO:root:std_penalty: 	[(0, 43250.37799796308), (1, 311009.3016827074), (2, 48224.068850416756), (3, 9923.853397708495), (4, 17504.92305843362), (5, 11502.27758090598), (6, 11997.967117736072), (7, 11998.005143600378)]
INFO:root:### Best plan by prob of penalized: [0], overhead 18.97561812400818s
INFO:root:std_penalty: 	[(0, 0.6), (1, 0.9), (2, 0.66), (3, 0.64), (4, 0.86), (5, 0.72), (6, 0.78), (7, 0.78)]
