INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 1.0
INFO:root:Recentered plan cost = 20961.24, plan is: /*+
SeqScan(it)
SeqScan(k)
IndexScan(mk)
IndexScan(mi_idx)
IndexScan(t)
NestLoop ( k mk )
NestLoop ( k mk mi_idx )
NestLoop ( it k mk mi_idx )
NestLoop ( it k mk mi_idx t )
Leading ( ( ( it ( ( k mk ) mi_idx ) ) t ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.47434960849957253), ((1, 'k.txt'), 0.12636576745174438), ((5, 'mi_idx_it_both.txt'), 0.003476975994021599), ((7, 'mk_mi_idx_r.txt'), -0.0022582024169264005), ((2, 'mi_idx.txt'), 0.0008318132956464527), ((8, 't_mi_idx_both.txt'), 0.00031584300582339337), ((4, 't.txt'), 3.522698802393012e-05), ((9, 't_mk_l.txt'), -7.519414574190446e-06)]
INFO:root:Max absolute value 1: (0, 4) - Value: 1.5069153519601834
Max absolute value 2: (0, 2) - Value: 0.2557693410435576
Max absolute value 3: (0, 7) - Value: 0.2543621398255589
Max absolute value 4: (0, 5) - Value: 0.25408579607684084
Max absolute value 5: (0, 6) - Value: 0.2537381589371247

INFO:root:Sobols samples size: 2304
INFO:root:[((6, 'mk_k_r.txt'), 0.39888891326348364), ((1, 'k.txt'), 0.12228293397858218), ((7, 'mk_mi_idx_r.txt'), -0.005654891331330156), ((2, 'mi_idx.txt'), 0.0056531890628624985), ((5, 'mi_idx_it_both.txt'), 0.005253009621163013), ((8, 't_mi_idx_both.txt'), 0.0003248302342035755), ((4, 't.txt'), 0.0002159044907089695), ((9, 't_mk_l.txt'), 5.8380930889213044e-05)]
INFO:root:Max absolute value 1: (4, 5) - Value: 0.49424141955308204
Max absolute value 2: (4, 7) - Value: 0.48130174904520934
Max absolute value 3: (4, 6) - Value: 0.4755605332955759
Max absolute value 4: (0, 4) - Value: 0.18962000756414177
Max absolute value 5: (0, 2) - Value: 0.06292308950175668

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.24052593295734465), ((1, 'k.txt'), 0.04952967257803632), ((5, 'mi_idx_it_both.txt'), 0.010886287112098743), ((7, 'mk_mi_idx_r.txt'), -0.008518266676893154), ((2, 'mi_idx.txt'), 0.007424533641475108), ((4, 't.txt'), -8.481663060836522e-05), ((8, 't_mi_idx_both.txt'), -7.335101628562185e-05), ((9, 't_mk_l.txt'), -2.5871280269062627e-07)]
INFO:root:Max absolute value 1: (4, 5) - Value: 1.19535899099525
Max absolute value 2: (4, 7) - Value: 1.1741671783013052
Max absolute value 3: (4, 6) - Value: 1.1646654420529345
Max absolute value 4: (0, 4) - Value: 0.33625217469908436
Max absolute value 5: (0, 5) - Value: 0.1496192478765384

INFO:root:Sobols samples size: 576
INFO:root:[((6, 'mk_k_r.txt'), 0.21998880548772673), ((1, 'k.txt'), -0.0580459615959236), ((5, 'mi_idx_it_both.txt'), 0.015396159247504176), ((2, 'mi_idx.txt'), 0.004063134647363932), ((7, 'mk_mi_idx_r.txt'), -0.0015064803113419756), ((8, 't_mi_idx_both.txt'), 0.0009955094612252218), ((4, 't.txt'), 2.804609122408276e-06), ((9, 't_mk_l.txt'), -4.3705000670856394e-08)]
INFO:root:Max absolute value 1: (4, 7) - Value: 1.5631898215850062
Max absolute value 2: (4, 6) - Value: 1.5453052935791436
Max absolute value 3: (4, 5) - Value: 1.5388398024374672
Max absolute value 4: (0, 4) - Value: 0.490911853535709
Max absolute value 5: (0, 5) - Value: 0.32771385032113176

INFO:root:Sobols samples size: 288
INFO:root:[((1, 'k.txt'), -0.9405420121318625), ((6, 'mk_k_r.txt'), 0.6562049909465291), ((2, 'mi_idx.txt'), -0.031573968781797544), ((7, 'mk_mi_idx_r.txt'), 0.0046391922917890524), ((5, 'mi_idx_it_both.txt'), -0.003319259899181985), ((8, 't_mi_idx_both.txt'), 0.0019324780438819574), ((4, 't.txt'), -0.0009513694477927692), ((9, 't_mk_l.txt'), -1.7826256758465947e-07)]
INFO:root:Max absolute value 1: (4, 7) - Value: 6.983380829446534
Max absolute value 2: (4, 6) - Value: 6.917553475319499
Max absolute value 3: (4, 5) - Value: 6.773525677010927
Max absolute value 4: (0, 4) - Value: 2.8657932390352077
Max absolute value 5: (0, 1) - Value: 1.0583810611123263

INFO:root:Sobols samples size: 144
INFO:root:[((1, 'k.txt'), -2.1623224219155994), ((6, 'mk_k_r.txt'), 0.39538757018875936), ((2, 'mi_idx.txt'), -0.08887960327753501), ((7, 'mk_mi_idx_r.txt'), 0.01268124015625366), ((8, 't_mi_idx_both.txt'), 0.004106230298957294), ((5, 'mi_idx_it_both.txt'), 0.0033263291154826697), ((4, 't.txt'), -0.001563160410684207), ((9, 't_mk_l.txt'), -1.6677902396271606e-06)]
INFO:root:Max absolute value 1: (4, 7) - Value: 10.231214071633174
Max absolute value 2: (4, 6) - Value: 10.133683813996708
Max absolute value 3: (4, 5) - Value: 9.918364775505793
Max absolute value 4: (0, 4) - Value: 2.9556610900145777
Max absolute value 5: (0, 1) - Value: 1.9720444880040935

INFO:root:Sobol's solving time: 215.06939911842346(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 1.0, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 11 plan: 	[(0, 7951.76), (1, 7958.21), (2, 7982.96), (3, 8003.27), (4, 24169.88), (5, 17509.26), (6, 20107.37), (7, 24121.93), (8, 24173.79), (9, 24171.29), (10, 64820.28)]
INFO:root:Sensitive predicates: [1, 5, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [7], overhead 25.939343214035034s
INFO:root:exp_penalty_w_tol: 	[(0, 261227), (1, 264058), (2, 356193), (3, 430093), (4, 28535), (5, 36501), (6, 28538), (7, 22831), (8, 24338), (9, 23323), (10, 46458)]
INFO:root:### Best plan by std penalty: [10], overhead 25.939343214035034s
INFO:root:std_penalty: 	[(0, 1364008.2964741616), (1, 1362831.8179877698), (2, 1838935.6879288058), (3, 2191316.9293838087), (4, 115928.34463274125), (5, 36697.22516056637), (6, 27368.788658239388), (7, 86198.22827401891), (8, 86350.3859421859), (9, 86486.69869614838), (10, 14461.281610765984)]
INFO:root:### Best plan by prob of penalized: [0, 1], overhead 25.939343214035034s
INFO:root:std_penalty: 	[(0, 0.46), (1, 0.46), (2, 0.58), (3, 0.68), (4, 0.74), (5, 0.84), (6, 0.84), (7, 0.68), (8, 0.7), (9, 0.68), (10, 0.96)]
