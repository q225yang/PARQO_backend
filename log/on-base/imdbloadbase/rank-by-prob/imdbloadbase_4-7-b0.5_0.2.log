INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 0.5
INFO:root:Recentered plan cost = 16705.4, plan is: /*+
SeqScan(it)
SeqScan(k)
IndexScan(mk)
IndexScan(mi_idx)
IndexScan(t)
NestLoop ( k mk )
NestLoop ( k mk mi_idx )
NestLoop ( it k mk mi_idx )
NestLoop ( it k mk mi_idx t )
Leading ( ( ( it ( ( k mk ) mi_idx ) ) t ) ) */
INFO:root:Sobols samples size: 4608
INFO:root:[((6, 'mk_k_r.txt'), 0.5109854186116098), ((1, 'k.txt'), 0.323602555725075), ((5, 'mi_idx_it_both.txt'), 0.0028171067419454935), ((2, 'mi_idx.txt'), -0.0026208916300670864), ((8, 't_mi_idx_both.txt'), 0.001204687886062557), ((7, 'mk_mi_idx_r.txt'), -0.000195471488619282), ((4, 't.txt'), -8.901321216426348e-05), ((9, 't_mk_l.txt'), 7.261629954698289e-05)]
INFO:root:Max absolute value 1: (0, 5) - Value: -0.2789591314496446
Max absolute value 2: (0, 6) - Value: -0.2772821240197965
Max absolute value 3: (0, 7) - Value: -0.27696042163375084
Max absolute value 4: (0, 2) - Value: -0.2761542332956518
Max absolute value 5: (0, 1) - Value: -0.27380709219191984

INFO:root:Sobols samples size: 2304
INFO:root:[((1, 'k.txt'), 0.5023981067246366), ((6, 'mk_k_r.txt'), 0.49684272734237517), ((5, 'mi_idx_it_both.txt'), 0.015103555493699449), ((2, 'mi_idx.txt'), -0.007906047621820005), ((7, 'mk_mi_idx_r.txt'), -0.0035090104537009847), ((8, 't_mi_idx_both.txt'), 0.0016193381780631195), ((4, 't.txt'), -0.0003167202492519848), ((9, 't_mk_l.txt'), 3.8009073846694854e-05)]
INFO:root:Max absolute value 1: (4, 6) - Value: 0.46989644284839277
Max absolute value 2: (4, 7) - Value: 0.4647824183056465
Max absolute value 3: (4, 5) - Value: 0.46293468613165295
Max absolute value 4: (0, 6) - Value: -0.4560369237225588
Max absolute value 5: (0, 5) - Value: -0.45582678588853914

INFO:root:Sobols samples size: 1152
INFO:root:[((6, 'mk_k_r.txt'), 0.5169053539982457), ((1, 'k.txt'), 0.38816341039785973), ((5, 'mi_idx_it_both.txt'), 0.010231650421054414), ((2, 'mi_idx.txt'), -0.003252609353170482), ((8, 't_mi_idx_both.txt'), 0.0022919353522328836), ((7, 'mk_mi_idx_r.txt'), 0.0019877656374151804), ((4, 't.txt'), 0.0011900191894987243), ((9, 't_mk_l.txt'), 0.00015587622249746787)]
INFO:root:Max absolute value 1: (4, 6) - Value: 0.6075758819145847
Max absolute value 2: (4, 7) - Value: 0.5995944719245321
Max absolute value 3: (4, 5) - Value: 0.5952894482499459
Max absolute value 4: (0, 6) - Value: -0.39672333886857236
Max absolute value 5: (0, 2) - Value: -0.39441041317957504

INFO:root:Sobols samples size: 576
INFO:root:[((1, 'k.txt'), 0.37559460466336936), ((6, 'mk_k_r.txt'), 0.06824704820046305), ((5, 'mi_idx_it_both.txt'), -0.02692968679644193), ((2, 'mi_idx.txt'), -0.005224789687540212), ((8, 't_mi_idx_both.txt'), 0.0018521058201476197), ((4, 't.txt'), 0.0015461441760989828), ((7, 'mk_mi_idx_r.txt'), -0.00019654816768882144), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (4, 6) - Value: 2.0269161750152964
Max absolute value 2: (4, 7) - Value: 2.022173530686317
Max absolute value 3: (4, 5) - Value: 1.9787449175808383
Max absolute value 4: (0, 6) - Value: -0.3959737362877871
Max absolute value 5: (0, 2) - Value: -0.3958006151598744

INFO:root:Sobols samples size: 288
INFO:root:[((6, 'mk_k_r.txt'), 0.14654457304630694), ((1, 'k.txt'), 0.1320111655934088), ((5, 'mi_idx_it_both.txt'), -0.009597666197248474), ((2, 'mi_idx.txt'), 0.0014953874546447385), ((4, 't.txt'), -0.0008342577339627825), ((8, 't_mi_idx_both.txt'), -0.0005422329085808961), ((7, 'mk_mi_idx_r.txt'), 0.0003166527975429253), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (4, 6) - Value: 2.5596477865656517
Max absolute value 2: (4, 7) - Value: 2.559152738238623
Max absolute value 3: (4, 5) - Value: 2.500517237976259
Max absolute value 4: (0, 1) - Value: -0.2207249149106088
Max absolute value 5: (0, 6) - Value: -0.21463792700395584

INFO:root:Sobols samples size: 144
INFO:root:[((1, 'k.txt'), -0.13211419893644136), ((6, 'mk_k_r.txt'), 0.04442794590328486), ((5, 'mi_idx_it_both.txt'), -0.010335342009386631), ((7, 'mk_mi_idx_r.txt'), 0.0018300031051858836), ((4, 't.txt'), -0.0013188053599003473), ((8, 't_mi_idx_both.txt'), -0.0008562678730953531), ((2, 'mi_idx.txt'), -0.0003332821839769398), ((9, 't_mk_l.txt'), 0.0)]
INFO:root:Max absolute value 1: (4, 6) - Value: 4.003510520715109
Max absolute value 2: (4, 7) - Value: 4.002668926875364
Max absolute value 3: (4, 5) - Value: 3.905042589554789
Max absolute value 4: (0, 4) - Value: 0.1757164299839361
Max absolute value 5: (0, 3) - Value: 0.02074928806178077

INFO:root:Sobol's solving time: 216.3362946510315(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 0
INFO:root:Instance id = None, Error div = 2, bandwidth = 0.5, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 11 plan: 	[(0, 7934.88), (1, 7941.34), (2, 7966.24), (3, 7986.48), (4, 24153.39), (5, 17512.87), (6, 20105.27), (7, 24105.55), (8, 24157.76), (9, 24155.26), (10, 64814.28)]
INFO:root:Sensitive predicates: [1, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [5], overhead 25.955737590789795s
INFO:root:exp_penalty_w_tol: 	[(0, 11508), (1, 12722), (2, 19066), (3, 26327), (4, 7888), (5, 6450), (6, 7096), (7, 7934), (8, 8925), (9, 8295), (10, 48389)]
INFO:root:### Best plan by std penalty: [7], overhead 25.955737590789795s
INFO:root:std_penalty: 	[(0, 30579.016602147854), (1, 33164.68105586455), (2, 43520.48832480953), (3, 54185.81501621919), (4, 6030.655171603035), (5, 6553.805635698579), (6, 6925.890901593703), (7, 5874.964147382855), (8, 6130.421934639527), (9, 6080.684073850758), (10, 6360.818815683795)]
INFO:root:### Best plan by prob of penalized: [0, 1], overhead 25.955737590789795s
INFO:root:std_penalty: 	[(0, 0.3), (1, 0.3), (2, 0.56), (3, 0.78), (4, 0.7), (5, 0.56), (6, 0.58), (7, 0.72), (8, 0.76), (9, 0.72), (10, 1.0)]
