INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Sobol: Sample size N = 256, b = 1.0
INFO:root:Recentered plan cost = 34563.28, plan is: /*+
SeqScan(mc)
IndexScan(t)
IndexScan(mi_idx)
IndexScan(it)
SeqScan(ct)
NestLoop ( mc t )
NestLoop ( mc t mi_idx )
NestLoop ( mc t mi_idx it )
NestLoop ( mc t mi_idx it ct )
Leading ( ( ( ( ( mc t ) mi_idx ) it ) ct ) ) */
INFO:root:Sobols samples size: 3584
INFO:root:[((6, 'mi_idx_it_r.txt'), 0.9481725414036746), ((2, 'mc.txt'), -0.0002634290469313596), ((5, 'mc_ct_r.txt'), 8.976129386565761e-05), ((7, 'mi_idx_mc_r.txt'), 3.0216798697297857e-05), ((8, 't_mc_r.txt'), -4.295496133297504e-06), ((9, 't_mi_idx__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 5) - Value: 0.06627376046980071
Max absolute value 2: (2, 4) - Value: 0.06626895330518907
Max absolute value 3: (2, 3) - Value: 0.06624071096527506
Max absolute value 4: (0, 2) - Value: 0.0005975921119564243
Max absolute value 5: (4, 5) - Value: -0.00023976054803034828

INFO:root:Sobols samples size: 1792
INFO:root:[((6, 'mi_idx_it_r.txt'), 0.8189200167164014), ((2, 'mc.txt'), -0.00025300207430251065), ((8, 't_mc_r.txt'), 0.00024087412385380514), ((7, 'mi_idx_mc_r.txt'), -9.096133998325795e-05), ((5, 'mc_ct_r.txt'), 6.888899060529919e-05), ((9, 't_mi_idx__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 3) - Value: 0.20018883495430911
Max absolute value 2: (2, 5) - Value: 0.20014358847898472
Max absolute value 3: (2, 4) - Value: 0.19985193390304917
Max absolute value 4: (4, 5) - Value: -0.0006301793570909839
Max absolute value 5: (0, 2) - Value: 0.00044041700658048466

INFO:root:Sobols samples size: 896
INFO:root:[((6, 'mi_idx_it_r.txt'), 0.7613349624002539), ((8, 't_mc_r.txt'), 0.00028279548782694395), ((2, 'mc.txt'), -0.00021155949607399376), ((7, 'mi_idx_mc_r.txt'), -0.00016690447638120556), ((5, 'mc_ct_r.txt'), -4.435593507806563e-05), ((9, 't_mi_idx__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 3) - Value: 0.6015548347934296
Max absolute value 2: (2, 5) - Value: 0.6014471532585759
Max absolute value 3: (2, 4) - Value: 0.6012880933498711
Max absolute value 4: (4, 5) - Value: -0.0005977228089548443
Max absolute value 5: (3, 4) - Value: 0.00021108233288506405

INFO:root:Sobols samples size: 448
INFO:root:[((6, 'mi_idx_it_r.txt'), 0.7257266705822245), ((8, 't_mc_r.txt'), 0.0005892314815540845), ((7, 'mi_idx_mc_r.txt'), -0.00047409783457483143), ((2, 'mc.txt'), 0.00034120197559703124), ((5, 'mc_ct_r.txt'), -8.750585351345204e-05), ((9, 't_mi_idx__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 3) - Value: 0.6681820033031097
Max absolute value 2: (2, 5) - Value: 0.6678731479009652
Max absolute value 3: (2, 4) - Value: 0.6673208014188632
Max absolute value 4: (4, 5) - Value: -0.0006783828026992334
Max absolute value 5: (0, 5) - Value: -0.0006574738901345377

INFO:root:Sobols samples size: 224
INFO:root:[((6, 'mi_idx_it_r.txt'), 0.17679415988468883), ((7, 'mi_idx_mc_r.txt'), -0.0008688579254269325), ((8, 't_mc_r.txt'), 0.000735362510978207), ((2, 'mc.txt'), 0.0006457063459628069), ((5, 'mc_ct_r.txt'), 0.0), ((9, 't_mi_idx__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 3) - Value: 1.8241162259594652
Max absolute value 2: (2, 5) - Value: 1.8236495495801384
Max absolute value 3: (2, 4) - Value: 1.823555542913856
Max absolute value 4: (4, 5) - Value: -0.0009706716189353101
Max absolute value 5: (0, 4) - Value: -0.0008969031183630471

INFO:root:Sobols samples size: 112
INFO:root:[((6, 'mi_idx_it_r.txt'), 0.22595755809278814), ((7, 'mi_idx_mc_r.txt'), -0.0018492731196436804), ((2, 'mc.txt'), 0.0015104925244827918), ((8, 't_mc_r.txt'), 0.0014530160267156862), ((5, 'mc_ct_r.txt'), 0.0), ((9, 't_mi_idx__it.txt'), 0.0)]
INFO:root:Max absolute value 1: (2, 3) - Value: 1.7757218899814542
Max absolute value 2: (2, 5) - Value: 1.7748247623486773
Max absolute value 3: (2, 4) - Value: 1.7746440459909958
Max absolute value 4: (0, 2) - Value: -0.0018282841758879564
Max absolute value 5: (3, 4) - Value: 0.0018236201364510035

INFO:root:Sobol's solving time: 165.42975902557373(s)
INFO:root:
########## Robust Query Optimization ############ 

INFO:root:Original optimal plan id is 5
INFO:root:Instance id = None, Error div = 2, bandwidth = 1.0, tolerance = 0.2, have 50 samples.
INFO:root:Cost of 6 plan: 	[(0, 34563.6), (1, 34563.41), (2, 34563.28), (3, 34563.41), (4, 34563.28), (5, 20209.37)]
INFO:root:Sensitive predicates: [2, 5, 6]
INFO:root:The number of samples to calculate expected penalty = 50.
INFO:root:### Best plan by exp penalty: [0, 1, 2, 3, 4], overhead 14.268561601638794s
INFO:root:exp_penalty_w_tol: 	[(0, 1970), (1, 1970), (2, 1970), (3, 1970), (4, 1970), (5, 108111)]
INFO:root:### Best plan by std penalty: [4], overhead 14.268561601638794s
INFO:root:std_penalty: 	[(0, 5502.80650632893), (1, 5502.329978867678), (2, 5502.311274676124), (3, 5502.162727705625), (4, 5502.131200058396), (5, 106939.60382367206)]
INFO:root:### Best plan by prob of penalized: [0, 1, 2, 3, 4], overhead 14.268561601638794s
INFO:root:std_penalty: 	[(0, 0.12), (1, 0.12), (2, 0.12), (3, 0.12), (4, 0.12), (5, 0.8)]
